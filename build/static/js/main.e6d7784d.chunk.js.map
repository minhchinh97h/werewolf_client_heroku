{"version":3,"sources":["components/MainPage/WaitingRoom/DisplayPlayerNames/DisplayPlayerNames.js","components/MainPage/WaitingRoom/DisplayChosenCards/DisplayChosenCards.js","components/MainPage/WaitingRoom/WaitingRoom.js","components/MainPage/InGameRoom/RenderBasedOnRoles/BearLeader/BearLeader.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Cupid/Cupid.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Seer/Seer.js","components/MainPage/InGameRoom/RenderBasedOnRoles/TheFox/TheFox.js","components/MainPage/InGameRoom/RenderBasedOnRoles/ThePiedPiper/ThePiedPiper.js","components/MainPage/InGameRoom/RenderBasedOnRoles/TheSavior/TheSavior.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Werewolves/Werewolves.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Witch/Witch.js","components/MainPage/InGameRoom/RenderBasedOnRoles/RoundEnd/RoundEnd.js","components/MainPage/InGameRoom/InGameRoom.js","components/Welcome/Welcome.js","validation/currentRoles/currentRoles.js","serverUrl.js","components/Login/Login.js","components/Footer/Footer.js","components/MainPage/WaitingRoom/DisplayCards/DisplayCards.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["DisplayPlayerNamesSocket","GetCurrentRolesSocket","GetAdminSocket","StartGameSocket","firstRoundSocket","bearSocket","calledTurnSocket","getPlayerSocket","getNextTurnSocket","cupidSocket","seerSocket","foxSocket","piperSocket","getCharmedSocket","saviorSocket","otherSocket","witchSocket","timer","minute","second","roundEndSocket","votingRoundSocket","votedHangedPlayerSocket","InGameSocket","adminSocket","roundEndsSocket","Welcome","state","playButton","_this","props","history","push","prevProps","prevState","react_default","a","createElement","className","onClick","this","Component","currentRoles","Werewolves","Ordinary Townsfolk","Seer/ Fortune Teller","Cupid","Witch","The savior","The pied piper","The fox","The bear leader","serverUrl","uniqid","require","axios","Login","newRoomButton","roomid","input_player_username_node","document","getElementById","value","length","placeholder","method","url","data","username","then","res","catch","err","console","log","joinButton","input_player_roomid_node","type","id","name","Footer","DisplayPlayerNames","_isMounted","renderPlayerNames","_this2","socketIOClient","on","emit","setState","map","player","key","Fragment","DisplayCards","renderCards","renderPressedCards","isCardSelected","selectedCards","pressedCards","decreaseCardBttn","e","innerText","name_array","value_array","hasOwnProperty","forEach","index","quantityId","chooseCardBttn","submitCardsBttn","sentData","socket","card","cardId","bind","k","DisplayChosenCards","renderChosenCards","cards","Header","ChooseUserTab","classList","remove","add","ChooseCardCollectionTab","ChooseFinalTab","WaitingRoom","admin","numberOfPlayers","ifStartGame","renderDisplayCardTabWhetherPlayerIsAdmin","renderStartButtonIfAdmin","startGameBttn","match","params","query","WaitingRoom_DisplayCards_DisplayCards","DisplayChosenCards_DisplayChosenCards_DisplayChosenCards","disconnect","components_Header_Header","DisplayPlayerNames_DisplayPlayerNames_DisplayPlayerNames","bear_target_bttn_ids","players","BearLeader","renderUI","renderPlayers","endTurnConfirm","renderScentTargetNeighbor","renderLovers","renderCharmedPlayers","scentTarget","receiveTurn","PlayerToScent","playersToScent","window","confirm","sendingData","endTurnBttn","role","_this3","cupid_target_bttn_ids","playersToConnect","renderTargetConnection","bttnId","disabled","canUse","seer_target_bttn_ids","Seer","renderTargetRole","playerToRevealBttn","the_fox_target_bttn_ids","playersToReveal_arr","TheFox","playersToRevealBttn","piper_target_bttn_ids","playersToCharm","ThePiedPiper","PlayersToCharm","protectTarget","lastProtectedPlayer","TheSavior","isDead","isSilence","renderSaviorAction","ProtectPlayer","otherWolves","targetChoice","falseRole_arr","target_button_id_arr","renderOtherChoices","choseTarget","renderFinalTarget","renderOwnTarget","renderFalsePickingPhase","didChooseFalseRole","false_role_button_id_arr","false_role_werewolf_id_arr","chooseTargetBttn","wolfName","AgreeOnKill","werewolf","chooseFalseRole","falseRole","Array","every","numberOfWerewolves","otherFalseRoles_arr","werewolvesId","domButton","domName","otherFalseRole","werewolvesIconId","playerHolderId","wolfNode","isContainWolfName","wolf","choice","target","protectId_buttons","killId_buttons","renderWitchAction","KillPlayerBttn","target_kill","ProtectPlayerBttn","target_protect","UIEndTurnBttn","leftAbilities","killId","protectId","useKill","useHeal","setUpTime","chosenPlayer","round_end_target_bttn_id_arr","RoundEnd","renderChosenExecutedPlayer","renderFinalExecutedPlayer","endRoundConfirm","timerEnds","renderVotePlayerButton","VotePlayer","style","display","ChoosePlayer","EndRound","roundEndPlayerId","setInterval","clearInterval","Math","floor","playersGetHang","InGameRoom","renderPlayerRole","renderRoleUI","renderStartBttn","startBttnClicked","isAdmin","roundEnds","gameEnds","sideWon","startBttn","CloseTheGame","ChooseLeftTab","ChooseMiddleTab","ChooseRightTab","location","row","found","special","RenderBasedOnRoles_Werewolves_Werewolves","RenderBasedOnRoles_Seer_Seer","RenderBasedOnRoles_Cupid_Cupid","RenderBasedOnRoles_Witch_Witch","RenderBasedOnRoles_TheSavior_TheSavior","RenderBasedOnRoles_ThePiedPiper_ThePiedPiper","RenderBasedOnRoles_TheFox_TheFox","RenderBasedOnRoles_BearLeader_BearLeader","info","dead","death","i","RoundEnd_RoundEnd_RoundEnd","App","Route","exact","path","component","components_Footer_Footer","Boolean","hostname","ReactDOM","render","BrowserRouter","es6","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6d7784d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport \"./DisplayPlayerNames.css\"\r\n\r\nimport serverUrl from '../../../../serverUrl'\r\n\r\nlet DisplayPlayerNamesSocket\r\n\r\nclass DisplayPlayerNames extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderPlayerNames: null\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        DisplayPlayerNamesSocket = socketIOClient(serverUrl + 'main-page')\r\n        DisplayPlayerNamesSocket.on('connect', () => {\r\n            DisplayPlayerNamesSocket.emit('RequestToGetPlayersAndJoinRoom', this.props.roomid)\r\n        })\r\n\r\n        DisplayPlayerNamesSocket.on('GetBroadCastPlayers', data => \r\n        {\r\n            if(this._isMounted)\r\n                this.setState({renderPlayerNames: data.map(player => {return(<div key = {player} className=\"player-name-holder\"><p>{player}</p></div>)})})\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                {this.state.renderPlayerNames}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport {DisplayPlayerNames, DisplayPlayerNamesSocket}","import React, { Component } from 'react'\r\n\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../serverUrl'\r\n\r\nimport './DisplayChosenCards.css'\r\n\r\nlet GetCurrentRolesSocket\r\n\r\nclass DisplayChosenCards extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderChosenCards: null\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n            GetCurrentRolesSocket = socketIOClient(serverUrl + 'get-current-roles')\r\n        \r\n            GetCurrentRolesSocket.on('connect', () => {\r\n                GetCurrentRolesSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            GetCurrentRolesSocket.on('GetSelectedCards', data => {\r\n                if(data !== null){\r\n                    let cards = []\r\n\r\n                    for(var key in data){\r\n                        if(data.hasOwnProperty(key)){\r\n                            if(data[key] > 0)\r\n                                cards.push(key + ' x' + data[key])\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        renderChosenCards: cards.map((data, index) => {\r\n                            let key = 'chosen-roles-' + index\r\n                            return(\r\n                                <div key={key} className=\"chosen-card-container\">\r\n                                    <p>{data}</p>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"display-chosen-cards\">\r\n                {this.state.renderChosenCards}\r\n            </div>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport {DisplayChosenCards, GetCurrentRolesSocket}","import React, { Component } from 'react'\r\n\r\nimport {DisplayPlayerNames, DisplayPlayerNamesSocket} from './DisplayPlayerNames/DisplayPlayerNames'\r\nimport DisplayCards from './DisplayCards/DisplayCards'\r\nimport {DisplayChosenCards, GetCurrentRolesSocket} from './DisplayChosenCards/DisplayChosenCards'\r\n\r\nimport Header from '../../Header/Header'\r\nimport socketIOClient from 'socket.io-client'\r\nimport serverUrl from '../../../serverUrl'\r\nimport \"./WaitingRoom.css\"\r\n\r\n\r\nlet GetAdminSocket,\r\n    StartGameSocket\r\n\r\nclass WaitingRoom extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        admin: \"\",\r\n        numberOfPlayers: 0,\r\n        ifStartGame: false,\r\n        renderDisplayCardTabWhetherPlayerIsAdmin: null,\r\n        renderStartButtonIfAdmin: null\r\n    }\r\n\r\n    startGameBttn = (e) => {\r\n        StartGameSocket.emit('start', this.props.match.params.roomid)\r\n\r\n        this.setState({\r\n            renderStartButtonIfAdmin: null\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            //Display header\r\n            document.getElementById(\"header\").classList.remove(\"hide-header\")\r\n\r\n            //Socket to get admin of the room\r\n            GetAdminSocket = socketIOClient(serverUrl +'get-admin', {\r\n                query: {\r\n                    roomid: this.props.match.params.roomid\r\n                }\r\n            })\r\n\r\n            GetAdminSocket.on('connect', () => {\r\n                GetAdminSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            GetAdminSocket.on('GetAdmin', data => {\r\n                this.setState({\r\n                    admin: data.admin,\r\n                    numberOfPlayers: data.numberOfPlayers\r\n                })\r\n    \r\n                if(this.props.match.params.username === data.admin){\r\n                    this.setState({\r\n                        renderDisplayCardTabWhetherPlayerIsAdmin: <DisplayCards roomid = {this.props.match.params.roomid}\r\n                                                                        admin = {this.state.admin}\r\n                                                                        username = {this.props.match.params.username}\r\n                                                                    />,\r\n                        renderStartButtonIfAdmin:   <div className=\"start-button-container\">\r\n                                                        <button type='button' onClick={this.startGameBttn}>Start</button>\r\n                                                    </div>\r\n                                                                    \r\n                    })\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        renderDisplayCardTabWhetherPlayerIsAdmin: <>\r\n                                                                <div className = \"display-chosen-cards-section\" id=\"display-cards-container\">\r\n                                                                    <div className = \"title-of-chosen-cards-tab\">\r\n                                                                        <h4>Card Collection</h4>\r\n                                                                    </div>\r\n                                                                    <DisplayChosenCards roomid = {this.props.match.params.roomid} />\r\n                                                                </div>\r\n                                                                </>\r\n                    })\r\n                }\r\n            })\r\n            \r\n            StartGameSocket = socketIOClient(serverUrl + 'start-game')\r\n\r\n            StartGameSocket.on('connect', () => {\r\n                StartGameSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n            \r\n            StartGameSocket.on('RedirectToGameRoom', data => {\r\n                if(data === \"ok\")\r\n                    this.props.history.push('/in-game-room/' + this.props.match.params.roomid + '/' + this.props.match.params.username)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        GetAdminSocket.disconnect()\r\n        StartGameSocket.disconnect()\r\n        DisplayPlayerNamesSocket.disconnect()\r\n        if(GetCurrentRolesSocket)\r\n            GetCurrentRolesSocket.disconnect()\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState){\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <Header />\r\n\r\n            <div className=\"waiting-room-container\">\r\n                <div className=\"waiting-room-title\">\r\n                    <h2>Waiting Room</h2>\r\n                </div>\r\n                \r\n                \r\n                <div className=\"waiting-room-main-data-container\" >\r\n                \r\n                    {this.state.renderDisplayCardTabWhetherPlayerIsAdmin}\r\n\r\n                    <div className = \"room-information-container\" id=\"room-information-container\">\r\n                        <div className= \"room-id-and-number-of-players-container\">\r\n                            <p>Room ID: {this.props.match.params.roomid} </p>\r\n                            <p>No. of Players: {this.state.numberOfPlayers} </p>\r\n                            <p>Admin: {this.state.admin}</p>\r\n                            <p>Name: {this.props.match.params.username}</p>\r\n                        </div>\r\n\r\n                        <div className = \"display-player-names-container\">\r\n                            <DisplayPlayerNames roomid = {this.props.match.params.roomid} />\r\n                        </div>\r\n\r\n                        {this.state.renderStartButtonIfAdmin}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </>\r\n        ) \r\n    }\r\n}\r\n\r\nexport {WaitingRoom, GetAdminSocket, StartGameSocket}","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet bear_target_bttn_ids = [],\r\n    players = [],\r\n    firstRoundSocket,\r\n    bearSocket,\r\n    calledTurnSocket,\r\n    getPlayerSocket,\r\n    getNextTurnSocket\r\n\r\nclass BearLeader extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        endTurnConfirm: null,\r\n        renderScentTargetNeighbor: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        scentTarget: null,\r\n        receiveTurn: false\r\n    }\r\n\r\n    PlayerToScent = (name, index, e) => {\r\n        let playersToScent = []\r\n        if(index >= 1 && index < players.length - 1){\r\n            playersToScent.push(players[index-1])\r\n            playersToScent.push(players[index+1])\r\n        }\r\n\r\n        else if (index === 0){\r\n            playersToScent.push(players[index + 1])\r\n        }\r\n\r\n        else if(index === players.length - 1){\r\n            playersToScent.push(players[index - 1])\r\n        }\r\n\r\n        if(window.confirm(\"Do you want to scent \" + name +\"?\")){\r\n            let sendingData = {\r\n                roomid: this.props.roomid,\r\n                playersToScent: playersToScent\r\n            }\r\n            bearSocket.emit('RequestToScentPlayer', sendingData)\r\n\r\n\r\n            this.setState({scentTarget : name})\r\n            players.length = 0\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'The bear leader'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n            \r\n            bear_target_bttn_ids.length = 0\r\n\r\n            bearSocket = socketIOClient(serverUrl + 'bear')\r\n\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Who do you want to scent its neighbor?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Who do you want to scent its neighbor?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //Bear's action\r\n            bearSocket.on('ScentPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    renderScentTargetNeighbor: <p>{data ? <>Werewolve(s) exists around <b>{this.state.scentTarget}</b></> : <>There is none of Werewolves around <b>{this.state.scentTarget}</b></>}</p>,\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        \r\n        players.length = 0\r\n        bear_target_bttn_ids.length = 0\r\n\r\n        firstRoundSocket.disconnect()\r\n        bearSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            bear_target_bttn_ids.length = 0\r\n            players.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        players.push(player)\r\n\r\n                        let id = \"bear_target_bttn_\" + index\r\n\r\n                        bear_target_bttn_ids.push(id)\r\n\r\n                        return(\r\n                            <button key = {player} id={id} type=\"button\" onClick={this.PlayerToScent.bind(this, player, index)}>{player}</button>\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderScentTargetNeighbor}\r\n                {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default BearLeader","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nimport \"./Cupid.css\"\r\n\r\nlet cupid_target_bttn_ids = [],\r\n    playersToConnect = [],\r\n    firstRoundSocket,\r\n    cupidSocket,\r\n    calledTurnSocket,\r\n    getNextTurnSocket,\r\n    getPlayerSocket\r\n\r\nclass Cupid extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderTargetConnection: null,\r\n        endTurnConfirm: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null\r\n    }\r\n\r\n    playersToConnect = (name, index, bttnId, e) => {\r\n        if(window.confirm(\"Do you want to choose \" + name + \"?\")){\r\n            playersToConnect.push(name)\r\n\r\n            document.getElementById(bttnId).disabled = true\r\n            document.getElementById(bttnId).classList.remove(\"grayder-background\")\r\n            document.getElementById(bttnId).classList.add(\"grayder-background\")\r\n\r\n            if(playersToConnect.length === 2){\r\n                // const socket = socketIOClient(serverUrl + 'cupid')\r\n\r\n                let sendingData = {\r\n                    roomid: this.props.roomid,\r\n                    playersToConnect: playersToConnect\r\n                }\r\n\r\n                cupidSocket.emit('RequestToConnectPlayers', sendingData)\r\n\r\n                playersToConnect.length = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Cupid'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted) {\r\n            \r\n            //need to set up the socket first, because the when making direct socket to server, server will only response to the received socket\r\n            //meaning socket in an onclick function will get response it that scope, the response will not be received in the socket in componentDidMount\r\n            cupidSocket = socketIOClient(serverUrl + 'cupid')\r\n\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    cupidSocket.emit('RequestToGetCupidAbility', this.props.roomid)\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    cupidSocket.emit('RequestToGetCupidAbility', this.props.roomid)\r\n                }\r\n            })\r\n\r\n            //Cupid's action\r\n            cupidSocket.on('CanUseAbility', canUse => {\r\n                if(canUse){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                                <p>Who do you want to connect?</p>\r\n                        </>\r\n                    })\r\n\r\n                    // to display all the players that are from the room (every character must have)\r\n                    getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n                    getPlayerSocket.on('connect', () => {\r\n                        getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                        getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n                    })\r\n\r\n                    getPlayerSocket.on('GetPlayers', data => {\r\n                        this.setState({\r\n                            renderPlayers: data.map((player, index) => {\r\n                                if(player !== this.props.username){\r\n                                    let id = \"cupid_target_bttn_\" + index\r\n            \r\n                                    cupid_target_bttn_ids.push(id)\r\n            \r\n                                    return(\r\n                                        <button key = {player} id={id} type=\"button\" onClick={this.playersToConnect.bind(this, player, index, id)}>{player}</button>\r\n                                    )\r\n                                }\r\n\r\n                                return ''\r\n                            })\r\n                        })\r\n                    })\r\n                }\r\n\r\n                else{\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    this.setState({\r\n                        renderTargetConnection: <p>You've finished your task, press End Turn.</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            cupidSocket.on('ConnectedPlayers', (data) => {\r\n                playersToConnect = data\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    renderTargetConnection: <p><b>{playersToConnect[0].player}</b> is now connected with <b>{playersToConnect[1].player}</b></p>,\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        playersToConnect.length = 0\r\n\r\n        firstRoundSocket.disconnect()\r\n        cupidSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                    {this.state.renderTargetConnection}\r\n                    {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default Cupid","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet seer_target_bttn_ids = [],\r\n    calledTurnSocket,\r\n    firstRoundSocket,\r\n    seerSocket,\r\n    getNextTurnSocket,\r\n    getPlayerSocket\r\n\r\nclass Seer extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderTargetRole: null,\r\n        endTurnConfirm: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        receiveTurn: false\r\n    }\r\n\r\n    playerToRevealBttn = (name, bttnId, e) => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            player: name\r\n        }\r\n\r\n        if(window.confirm(\"Do you want to view \" + name + \"'s card?\")){\r\n            seerSocket.emit('Request', sendingData)\r\n\r\n            seer_target_bttn_ids.forEach((bttnId, index) => {\r\n                if(document.getElementById(bttnId))\r\n                    document.getElementById(bttnId).disabled = true\r\n            })\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        \r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Seer/ Fortune Teller'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n\r\n        this.setState({endTurnConfirm: null})\r\n    }   \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n        \r\n\r\n        if(this._isMounted){\r\n            \r\n            seer_target_bttn_ids.length = 0\r\n\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    //render UI\r\n                    this.setState({\r\n                        renderUI: <>\r\n                                <p>Who do you want to reveal?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n            \r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    //render UI\r\n                    this.setState({\r\n                        renderUI: <>\r\n                                <p>Who do you want to reveal?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            seerSocket = socketIOClient(serverUrl + 'seer')\r\n\r\n            //Seer's action\r\n            seerSocket.on('RevealPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    renderTargetRole: <p><b>{data.username}</b>'s role is: <b>{data.role}</b></p>,\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        seer_target_bttn_ids.length = 0\r\n\r\n        calledTurnSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        seerSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            seer_target_bttn_ids.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        if(player !== this.props.username){\r\n                            let id = \"seer_target_bttn_\" + index\r\n    \r\n                            seer_target_bttn_ids.push(id)\r\n    \r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" onClick={this.playerToRevealBttn.bind(this, player, id)}>{player}</button>\r\n                            )\r\n                        }\r\n\r\n                        return ''\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                    <div className=\"in-game-render-ui-container\">\r\n                        {this.state.renderUI}\r\n                    </div>\r\n                    \r\n                    <div className=\"in-game-render-players-container\">\r\n                        {this.state.renderPlayers}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                    {this.state.renderTargetRole}\r\n                    {this.state.endTurnConfirm}\r\n                </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default Seer","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nimport './TheFox.css'\r\n\r\nlet the_fox_target_bttn_ids = [],\r\n    players = [],\r\n    playersToReveal_arr = [],\r\n    foxSocket,\r\n    getNextTurnSocket,\r\n    firstRoundSocket,\r\n    calledTurnSocket,\r\n    getPlayerSocket\r\n  \r\nclass TheFox extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderTargetRole: null,\r\n        endTurnConfirm: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        receiveTurn: false\r\n    }\r\n\r\n    playersToRevealBttn = (name, index, e) => {\r\n        if(window.confirm(\"Do you want to scent \" + name + \"?\")){\r\n            playersToReveal_arr.push(name)\r\n\r\n            if(playersToReveal_arr.length === 3){\r\n                let sendingData = {\r\n                    roomid: this.props.roomid,\r\n                    players: playersToReveal_arr\r\n                }\r\n\r\n                foxSocket.emit('RequestToScent', sendingData)\r\n\r\n                the_fox_target_bttn_ids.forEach((bttnId, index) => {\r\n                    document.getElementById(bttnId).disabled = true\r\n                })\r\n            }\r\n           \r\n            if(document.getElementById(\"the_fox_target_bttn_\" + name)){\r\n                document.getElementById(\"the_fox_target_bttn_\" + name).classList.remove(\"grayder-background\")\r\n                document.getElementById(\"the_fox_target_bttn_\" + name).classList.add(\"grayder-background\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'The fox'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }   \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            the_fox_target_bttn_ids.length = 0\r\n            playersToReveal_arr.length = 0\r\n\r\n            foxSocket = socketIOClient(serverUrl + 'the-fox')\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    //render UI\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Choose 3 players to scent?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    //render UI\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Choose 3 players to scent?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //The Fox's action\r\n            foxSocket.emit('GetCanUseAbility', this.props.roomid)\r\n\r\n            foxSocket.on('CanUseAbility', data => {\r\n                //if the fox loses the ability\r\n                if(!data){\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    this.setState({\r\n                        renderTargetRole: <p>You lost your ability!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            foxSocket.on('GetScentPlayers', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    renderTargetRole: <p>Werewolves among <b>{playersToReveal_arr[0]}</b>, <b>{playersToReveal_arr[1]}</b>, <b>{playersToReveal_arr[2]}</b>? <b>{data ? \"YES\" : \"NO\"}</b></p>,\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        the_fox_target_bttn_ids.length = 0\r\n        playersToReveal_arr.length = 0\r\n\r\n        foxSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            the_fox_target_bttn_ids.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                players = []\r\n\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        if(player !== this.props.username){\r\n                            players.push(player)\r\n                            let id = \"the_fox_target_bttn_\" + player\r\n    \r\n                            the_fox_target_bttn_ids.push(id)\r\n    \r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" onClick={this.playersToRevealBttn.bind(this, player, index)}>{player}</button>\r\n                            )\r\n                        }\r\n\r\n                        return ''\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderTargetRole}\r\n                {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default TheFox","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport \"./ThePiedPiper.css\"\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet piper_target_bttn_ids = [],\r\n    playersToCharm = [],\r\n    piperSocket,\r\n    firstRoundSocket,\r\n    getNextTurnSocket,\r\n    calledTurnSocket,\r\n    getCharmedSocket,\r\n    getPlayerSocket,\r\n    players = []\r\n\r\n\r\nclass ThePiedPiper extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        endTurnConfirm: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        playersToCharm: [],\r\n        receiveTurn: false\r\n    }\r\n\r\n    PlayersToCharm = (name, index, bttnId, e) => {\r\n        if(window.confirm(\"Do you want to charm \" + name + \"?\")){\r\n            playersToCharm.push(name)\r\n\r\n            document.getElementById(bttnId).disabled = true\r\n            document.getElementById(bttnId).classList.remove(\"piper-choose-player-button-disable\")\r\n            document.getElementById(bttnId).classList.add(\"piper-choose-player-button-disable\")\r\n\r\n            if(players.length >= 2){\r\n                if(playersToCharm.length === 2){\r\n                    this.setState({\r\n                        playersToCharm: playersToCharm.map(player => {\r\n                            return player\r\n                        })\r\n                    })\r\n    \r\n                    let sendingData = {\r\n                        roomid: this.props.roomid,\r\n                        playersToCharm: playersToCharm\r\n                    }\r\n    \r\n                    piperSocket.emit('RequestToCharmPlayers', sendingData)\r\n    \r\n                    playersToCharm.length = 0\r\n                }\r\n            }\r\n\r\n            else{\r\n                this.setState({\r\n                    playersToCharm: playersToCharm.map(player => {\r\n                        return player\r\n                    })\r\n                })\r\n\r\n                let sendingData = {\r\n                    roomid: this.props.roomid,\r\n                    playersToCharm: playersToCharm\r\n                }\r\n\r\n                piperSocket.emit('RequestToCharmPlayers', sendingData)\r\n\r\n                playersToCharm.length = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        \r\n        \r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'The pied piper'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            playersToCharm.length = 0\r\n            piper_target_bttn_ids.length = 0\r\n            players.length = 0\r\n            \r\n            piperSocket = socketIOClient(serverUrl + 'piper')\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Please charm 2 people</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Please charm 2 people</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //Piper's action\r\n            piperSocket.on('CharmedPlayers', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n\r\n            //Handle changes of the total charmed players via a socket event (every character must have)\r\n            getCharmedSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\r\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\r\n            getCharmedSocket.on('connect', () => {\r\n                getCharmedSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n            \r\n            getCharmedSocket.emit('RequestToRetrieveCharmPlayers', this.props.roomid)\r\n\r\n            getCharmedSocket.on('GetListOfCharmed', (data) => {\r\n                data.forEach((player) => {\r\n                    if(document.getElementById(\"piper_target_bttn_\" + player)){\r\n                        document.getElementById(\"piper_target_bttn_\" + player).classList.remove(\"piper-choose-player-button-disable\")\r\n                        document.getElementById(\"piper_target_bttn_\" + player).classList.add(\"piper-choose-player-button-disable\")\r\n                        document.getElementById(\"piper_target_bttn_\" + player).disabled = true\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n\r\n        playersToCharm.length = 0\r\n        piper_target_bttn_ids.length = 0\r\n        players.length = 0\r\n\r\n        piperSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getCharmedSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            piper_target_bttn_ids.length = 0\r\n            playersToCharm.length = 0\r\n            players.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        if(player !== this.props.username){\r\n                            let id = \"piper_target_bttn_\" + player\r\n    \r\n                            piper_target_bttn_ids.push(id)\r\n                            players.push(player)\r\n    \r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" onClick={this.PlayersToCharm.bind(this, player, index, id)}>{player}</button>\r\n                            )\r\n                        }\r\n\r\n                        return ''\r\n                    })\r\n                })\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                <p>Charmed {this.state.playersToCharm.length === 2 ? <><b>{this.state.playersToCharm[0]}</b> and <b>{this.state.playersToCharm[1]}</b> </> : null}successfully!</p>\r\n                {this.state.endTurnConfirm}\r\n            </div> \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default ThePiedPiper","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet protectTarget = '',\r\n    lastProtectedPlayer = '',\r\n    firstRoundSocket,\r\n    saviorSocket,\r\n    calledTurnSocket,\r\n    getNextTurnSocket,\r\n    getPlayerSocket\r\n\r\n\r\nclass TheSavior extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        isDead: false,\r\n        isSilence: false,\r\n        renderPlayers: null,\r\n        renderUI: null,\r\n        renderSaviorAction: null,\r\n        protectTarget: '',\r\n        receiveTurn: false\r\n    }\r\n\r\n    ProtectPlayer = (name, e) => {\r\n        protectTarget = name\r\n\r\n        if(window.confirm(\"Do you want to protect \" + name + \"?\")){\r\n\r\n            let sendingData = {\r\n                roomid: this.props.roomid,\r\n                protectTarget: protectTarget\r\n            }\r\n\r\n            saviorSocket.emit('RequestToProtectPlayer', sendingData)\r\n\r\n            this.setState({protectTarget})\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'The savior'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            saviorSocket = socketIOClient(serverUrl + 'savior')\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    saviorSocket.emit('RequestToGetLastProtectedPlayer', this.props.roomid)\r\n\r\n                    saviorSocket.on('LastProtectedPlayer', data => {\r\n                        lastProtectedPlayer = data\r\n\r\n                        this.setState({\r\n                            renderUI: <>\r\n                                    <p>Who do you want to protect?</p>\r\n                            </>,\r\n                            receiveTurn: true\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    saviorSocket.emit('RequestToGetLastProtectedPlayer', this.props.roomid)\r\n\r\n                    saviorSocket.on('LastProtectedPlayer', data => {\r\n                        lastProtectedPlayer = data\r\n\r\n                        this.setState({\r\n                            renderUI: <>\r\n                                    <p>Who do you want to protect?</p>\r\n                            </>,\r\n                            receiveTurn: true\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n\r\n            \r\n\r\n            //Savior's action\r\n            saviorSocket.on('ProtectedPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                if(data === 'ok'){\r\n                    \r\n\r\n                    this.setState({\r\n                        renderSaviorAction: <p><b>{this.state.protectTarget}</b> is protected!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n\r\n        firstRoundSocket.disconnect()\r\n        saviorSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        let id = \"savior_target_bttn_\" + player\r\n\r\n                        if(player === lastProtectedPlayer)\r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" className=\"grayder-background\" onClick={this.ProtectPlayer.bind(this, player)} disabled>{player}</button>\r\n                            )\r\n\r\n                        else\r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" onClick={this.ProtectPlayer.bind(this, player)}>{player}</button>\r\n                            )\r\n                    })\r\n                })\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderSaviorAction}\r\n                {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default TheSavior","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nimport \"./Werewolves.css\"\r\n\r\nlet otherWolves = [],\r\n    targetChoice = '',\r\n    falseRole_arr = [],\r\n    target_button_id_arr = []\r\n\r\nlet otherSocket, //werewolves namespace\r\n    getPlayerSocket,\r\n    firstRoundSocket,\r\n    calledTurnSocket,\r\n    getNextTurnSocket\r\n\r\nclass Werewolves extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderLovers: null,\r\n        endTurnConfirm: null,\r\n        renderOtherChoices: null,\r\n        choseTarget: null,\r\n        renderCharmedPlayers: null,\r\n        renderFinalTarget: null,\r\n        renderOwnTarget: null,\r\n        receiveTurn: false,\r\n        renderFalsePickingPhase: null,\r\n        didChooseFalseRole: false,\r\n        false_role_button_id_arr: [],\r\n        false_role_werewolf_id_arr: [],\r\n\r\n    }\r\n\r\n    chooseTargetBttn = (name, e) => {\r\n        targetChoice = name\r\n\r\n        let sendingData = {\r\n            choseTarget: name,\r\n            wolfName: this.props.username,\r\n            roomid: this.props.roomid\r\n        }\r\n\r\n        otherSocket.emit(\"RequestMyChoice\", sendingData)\r\n\r\n        this.setState({choseTarget: <p>{targetChoice}</p>})\r\n    }\r\n\r\n    AgreeOnKill = (e) => {\r\n        if(window.confirm(\"Kill \" + targetChoice + \"?\")){\r\n            let sendingData = {\r\n                choseTarget: targetChoice,\r\n                roomid: this.props.roomid,\r\n                werewolf: this.props.username\r\n            }\r\n\r\n            otherSocket.emit(\"RequestToAgreeKill\", sendingData)\r\n            otherSocket.emit(\"RequestToNotifyOther\", sendingData)\r\n\r\n            this.setState({\r\n                renderOwnTarget: <p>Choice: <strong>{targetChoice}</strong></p>,\r\n                renderUI: <span>Waiting for other players ...</span>\r\n            })\r\n\r\n            \r\n            target_button_id_arr.forEach((id) => {\r\n                document.getElementById(id).disabled = true\r\n            })\r\n        }\r\n    }\r\n\r\n    chooseFalseRole = (falseRole, e) => {\r\n        if(window.confirm(\"choose false role: \" + falseRole + \"?\")){\r\n            let sendingData = {\r\n                falseRole: falseRole,\r\n                wolfName: this.props.username,\r\n                roomid: this.props.roomid\r\n            }\r\n    \r\n            otherSocket.emit(\"RequestFalseRoleChoice\", sendingData)\r\n\r\n            falseRole_arr.forEach((falseRole) => {\r\n                document.getElementById(\"false_role_bttn_\" + falseRole).disabled = true\r\n                document.getElementById(\"false_role_bttn_\" + falseRole).classList.remove(\"grayder-background\")\r\n                document.getElementById(\"false_role_bttn_\" + falseRole).classList.add(\"grayder-background\")\r\n            })\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Werewolves',\r\n            player: this.props.username\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n\r\n        this.setState({endTurnConfirm: null})\r\n\r\n        this.setState({receiveTurn: false})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                \r\n                if(data instanceof Array){\r\n                    data.every(player => {\r\n                        if(player === this.props.username){\r\n                            this.setState({receiveTurn: true})\r\n                            //render UI\r\n                            this.setState({\r\n                                renderUI: <>\r\n                                        <p>Who do you want to kill?</p>\r\n                                        <button className=\"agree-on-kill-button\" onClick={this.AgreeOnKill} id=\"agree-on-kill-button\">Agree on Kill</button>\r\n                                </>\r\n                            })\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    })\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data instanceof Array){\r\n                    data.every(player => {\r\n                        if(player === this.props.username){\r\n                            this.setState({receiveTurn: true})\r\n                            //render UI\r\n                            this.setState({\r\n                                renderUI: <>\r\n                                        <p>Who do you want to kill?</p>\r\n                                        <button className=\"agree-on-kill-button\" onClick={this.AgreeOnKill} id=\"agree-on-kill-button\">Agree on Kill</button>\r\n                                </>\r\n                            })\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    })\r\n                }\r\n                \r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n            //Handle other werewolves choices && confirmation that the kill target is saved into database && final target\r\n            otherSocket = socketIOClient(serverUrl + 'werewolves')\r\n\r\n            //Join room for the werewolves namespace\r\n            otherSocket.on('connect', () => {\r\n                otherSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //confirmation\r\n            otherSocket.on('ConfirmKillRespond', data => {\r\n                if(data === \"all werewolves voted\"){\r\n\r\n                    let sendingData = {\r\n                        roomid: this.props.roomid,\r\n                        numberOfWerewolves: otherWolves.length + 1\r\n                    }\r\n                    otherSocket.emit('GetFalseRoles', sendingData)\r\n\r\n                    otherSocket.on('FalseRoles', data => {\r\n                        falseRole_arr = data\r\n                        let otherFalseRoles_arr = []\r\n\r\n                        otherSocket.emit('RequestToGetOtherFalseRoles', this.props.roomid)\r\n\r\n                        otherSocket.on('OtherFalseRoles', data => {\r\n                            otherFalseRoles_arr = data\r\n\r\n                            this.setState({ \r\n                                renderFalsePickingPhase: falseRole_arr.map((falseRole, index) => {\r\n                                    let bttnId = \"false_role_bttn_\" + falseRole,\r\n                                        werewolvesId = \"false_role_werewolf_\" + falseRole\r\n    \r\n                                    let domButton = <button id={bttnId} onClick={this.chooseFalseRole.bind(this, falseRole)}>{falseRole}</button>,\r\n                                        domName = <div id={werewolvesId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\r\n                                            \r\n    \r\n                                    otherFalseRoles_arr.every((otherFalseRole) => {\r\n                                        if(otherFalseRole.falseRole === falseRole){\r\n                                            domButton = <button id={bttnId} className=\"grayder-background\" disabled>{falseRole}</button>\r\n                                            domName = <div id={werewolvesId} className=\"in-game-render-players-container-werewolve-chosen\">{otherFalseRole.wolfName}</div>\r\n                                            return false\r\n                                        }\r\n                                        return true\r\n                                    })\r\n    \r\n                                    return(\r\n                                        <div key={falseRole} className=\"in-game-render-players-container-werewolve\">\r\n                                            {domButton}\r\n                                            {domName}\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            })\r\n                        })\r\n                    })\r\n\r\n                    otherSocket.on('FalseRoleChoice', data => {\r\n\r\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).disabled = true\r\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).classList.remove(\"grayder-background\")\r\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).classList.add(\"grayder-background\")\r\n\r\n                        document.getElementById(\"false_role_werewolf_\" + data.falseRole).innerText = data.wolfName\r\n                    })\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    this.setState({\r\n                        endTurnConfirm: <button className=\"werewolves-end-turn-button\" type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n\r\n        otherSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn !== prevState.receiveTurn && this.state.receiveTurn){\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                target_button_id_arr.length = 0\r\n\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        let id = \"werewolves_target_bttn_\" + player,\r\n                            werewolvesIconId = \"werewolves_icon_\" + player,\r\n                            playerHolderId = \"player_holder_\" + player\r\n                        \r\n                        target_button_id_arr.push(id)\r\n\r\n                        return(\r\n                            <div key = {player} className=\"in-game-render-players-container-werewolve\" id={playerHolderId}>\r\n                                <button  id={id} type=\"button\" onClick={this.chooseTargetBttn.bind(this, player)}>{player}</button>\r\n                                <div id={werewolvesIconId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                })\r\n\r\n                \r\n                \r\n\r\n                //Request to get other werewolves in this specific socket\r\n                otherSocket.emit('RequestToGetOtherWerewolves', this.props.roomid)\r\n\r\n                otherSocket.on('GetOtherWerewolves', data => {\r\n                    data.forEach((player) => {\r\n                        if(document.getElementById(\"werewolves_target_bttn_\" + player)){\r\n                            let wolfNode = document.getElementById(\"werewolves_target_bttn_\" + player)\r\n                            wolfNode.innerText += \" (Wolf)\"\r\n                            wolfNode.classList.remove(\"grayder-background\")\r\n                            wolfNode.classList.add(\"grayder-background\")\r\n                            wolfNode.disabled = true\r\n                        }\r\n                    })\r\n                })\r\n\r\n                \r\n\r\n                //others choices\r\n                otherSocket.on('OtherChoices', (data) => {\r\n                    //to advoid duplication\r\n                    let isContainWolfName = false\r\n                    otherWolves.length = 0\r\n                    \r\n                    otherWolves.forEach((wolf, index) => {\r\n                        if(wolf.wolfName === data.wolfName){\r\n                            wolf.choseTarget = data.choseTarget\r\n                            isContainWolfName = true\r\n                        }\r\n                    })\r\n\r\n                    if(!isContainWolfName){\r\n                        otherWolves.push(data)\r\n                    }\r\n\r\n                    otherWolves.forEach((choice) => {\r\n                        if(document.getElementById(\"werewolves_icon_\"+ choice.wolfName))\r\n                        document.getElementById(\"werewolves_icon_\"+ choice.wolfName).innerText = choice.choseTarget\r\n                    })\r\n                })\r\n                \r\n                /* <-----------------------------------------------> */\r\n                otherSocket.on('OtherNotified', data => {\r\n                    document.getElementById(\"player_holder_\" + data.werewolf).classList.remove(\"player-holder-grayer-background\")\r\n                    document.getElementById(\"player_holder_\" + data.werewolf).classList.add(\"player-holder-grayer-background\")\r\n                })\r\n\r\n                //Final target\r\n                otherSocket.on('ReceiveTheFinalTarget', data => {\r\n                    this.setState({\r\n                        renderFinalTarget: <p>Killed: <strong>{data}</strong></p>\r\n                    })\r\n                })\r\n            })\r\n        }\r\n\r\n\r\n        if(this.state.renderPlayers !== null && this.state.renderPlayers !== prevState.renderPlayers){\r\n            //Request to get other werewolves choices when the player arrives later\r\n            otherSocket.emit('RequestToGetOtherChoices', this.props.roomid)\r\n\r\n            otherSocket.on('GetOtherChoices', data => {\r\n                for(var key in data){\r\n                    if(data.hasOwnProperty(key)){\r\n                        if(document.getElementById(\"werewolves_icon_\" + key) && data[key].length > 0){\r\n                            document.getElementById(\"werewolves_icon_\"+ key).innerText = data[key]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            //Request to get other werewolves kill decisions when the player arrives later\r\n            otherSocket.emit('RequestToGetOtherKillDecisions', this.props.roomid)\r\n\r\n            otherSocket.on('OtherKillDecisions', data => {\r\n                for(var key in data){\r\n                    if(data.hasOwnProperty(key)){\r\n                        if(document.getElementById(\"player_holder_\" + key) && data[key].length > 0){\r\n                            document.getElementById(\"player_holder_\" + key).classList.remove(\"player-holder-grayer-background\")\r\n                            document.getElementById(\"player_holder_\" + key).classList.add(\"player-holder-grayer-background\")\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>  \r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                <div className=\"werewolves-announce-holder\">\r\n                    <div className=\"werewolves-annouce-words\">\r\n                        {this.state.renderOwnTarget}\r\n                        {this.state.renderFinalTarget}\r\n                    </div>\r\n                    {this.state.endTurnConfirm}\r\n                </div>\r\n                \r\n                <div className=\"werewolves-false-phase-holder\">\r\n                    {this.state.renderFalsePickingPhase}\r\n                </div>\r\n            </div> \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default Werewolves","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport \"./Witch.css\"\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet target = '',\r\n    protectId_buttons = [],\r\n    killId_buttons = [],\r\n    witchSocket,\r\n    firstRoundSocket,\r\n    calledTurnSocket,\r\n    getPlayerSocket,\r\n    getNextTurnSocket\r\n\r\n\r\nclass Witch extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderPlayers: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        renderUI: null,\r\n        endTurnConfirm: null,\r\n        renderWitchAction: null,\r\n        target: '',\r\n        receiveTurn: false\r\n    }\r\n\r\n    KillPlayerBttn = (name, e) => {\r\n        target = name\r\n\r\n        if(window.confirm(\"Do you want to kill \" + name + \"?\")){\r\n            let sendingData = {\r\n                roomid: this.props.roomid,\r\n                target_kill: name\r\n            }\r\n            \r\n            witchSocket.emit('RequestToKillPlayer', sendingData)\r\n\r\n            this.setState({target})\r\n        }\r\n    }\r\n\r\n    ProtectPlayerBttn = (name, e) => {\r\n        target = name\r\n\r\n        if(window.confirm(\"Do you want to save \" + name + \"?\")){\r\n            let sendingData = {\r\n                roomid: this.props.roomid,\r\n                target_protect: name\r\n            }\r\n    \r\n            witchSocket.emit('RequestToProtectPlayer', sendingData)\r\n\r\n            this.setState({target})\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        \r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Witch'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n\r\n    } \r\n\r\n    UIEndTurnBttn = (e) => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Witch'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n\r\n        this.setState({renderWitchAction: <p>You chose to end turn.</p>})\r\n        document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n        document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n        document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n        document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n        document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n        document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n        \r\n        if(this._isMounted){\r\n            protectId_buttons.length = 0\r\n            killId_buttons.length = 0\r\n            \r\n            witchSocket = socketIOClient(serverUrl + 'witch')\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                                <p>Choose your target to kill and to protect?</p>\r\n                                <button id=\"UI-end-turn-button\" className=\"end-turn-witch-button\" onClick={this.UIEndTurnBttn}>End turn</button>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Choose your target to kill and to protect?</p>\r\n                            <button className=\"end-turn-witch-button\" onClick={this.UIEndTurnBttn}>End turn</button>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n            \r\n            //witch's action\r\n            witchSocket.on('KillPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                if(data === 'ok'){\r\n                    this.setState({\r\n                        renderWitchAction: <p><b>{this.state.target}</b> Killed!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n\r\n                else if(data === 'No Kill Potion Left'){\r\n                    this.setState({\r\n                        renderWitchAction: <p>No Kill Potion Left!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            witchSocket.on('ProtectPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                if(data === 'ok'){\r\n                    this.setState({\r\n                        renderWitchAction: <p><b>{this.state.target}</b> Saved!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n\r\n                else if(data === 'No Heal Potion Left'){\r\n                    this.setState({\r\n                        renderWitchAction: <p>No Heal Potion Left!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        protectId_buttons.length = 0\r\n        killId_buttons.length = 0\r\n\r\n        witchSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            protectId_buttons.length = 0\r\n            killId_buttons.length = 0\r\n            \r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n\r\n                witchSocket.emit('RequestToRetrieveLeftAbilities', this.props.roomid)\r\n\r\n                witchSocket.on('LeftAbilities', leftAbilities => {\r\n                    this.setState({\r\n                        renderPlayers: data.map((player, index) => {\r\n                            let id = \"witch_target_bttn_\" + index,\r\n                                killId = \"witch_kill_bttn_\" + index,\r\n                                protectId = \"witch_protect_bttn\" + index\r\n                            protectId_buttons.push(protectId)\r\n                            killId_buttons.push(killId)\r\n                            \r\n                            return(\r\n                                <div key = {player}>\r\n                                    <p id={id}>{player}</p>\r\n                                    <div>\r\n                                        \r\n                                        {!leftAbilities.useKill && (player !== this.props.username) ? <button id={killId} onClick={this.KillPlayerBttn.bind(this, player)}>Kill</button>: null}\r\n                                        {!leftAbilities.useHeal ? <button id={protectId} onClick={this.ProtectPlayerBttn.bind(this, player)}>Protect</button> : null}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderWitchAction}\r\n                {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default Witch","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\nimport \"./RoundEnd.css\"\r\n\r\nlet setUpTime = 600, //10mins,\r\n    chosenPlayer = \"\",\r\n    timer,\r\n    round_end_target_bttn_id_arr = [],\r\n    minute, second\r\n\r\nlet roundEndSocket, //round-end namespace\r\n    getPlayerSocket \r\n\r\nexport default class RoundEnd extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderChosenExecutedPlayer: null,\r\n        renderFinalExecutedPlayer: null,\r\n        endRoundConfirm: null,\r\n        timerEnds: false,\r\n        renderVotePlayerButton: null\r\n    }\r\n\r\n    VotePlayer = () => {\r\n        if(window.confirm(\"Hang \" + chosenPlayer + \"?\")){\r\n            let sendingData = {\r\n                chosenPlayer: chosenPlayer,\r\n                roomid: this.props.roomid,\r\n                player: this.props.username\r\n            }\r\n\r\n            roundEndSocket.emit(\"RequestToHangPlayer\", sendingData)\r\n\r\n            this.setState({renderChosenExecutedPlayer: <p>Your Choice: <b>{chosenPlayer}</b></p>})\r\n\r\n            document.getElementById(\"vote-hanged-button\").style.display = \"none\"\r\n\r\n            round_end_target_bttn_id_arr.forEach(id => {\r\n                document.getElementById(id).disabled = true\r\n                document.getElementById(id).classList.remove('grayder-background')\r\n                document.getElementById(id).classList.add('grayder-background')\r\n            })\r\n        }\r\n    }\r\n\r\n    ChoosePlayer = (name, e) => {\r\n        chosenPlayer = name\r\n\r\n        let sendingData = {\r\n            chosenPlayer: chosenPlayer,\r\n            player: this.props.username,\r\n            roomid: this.props.roomid\r\n        }\r\n\r\n        roundEndSocket.emit(\"BroadCastMyChoice\", sendingData)\r\n\r\n        this.setState({\r\n            renderVotePlayerButton: <button id=\"vote-hanged-button\" className=\"vote-hanged-button\" onClick={this.VotePlayer}>Vote</button>\r\n        })\r\n    }\r\n\r\n    EndRound = () => {\r\n\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            player: this.props.username\r\n        }\r\n\r\n        roundEndSocket.emit('RequestToEndRound', sendingData)\r\n\r\n        this.setState({endRoundConfirm: null})\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n            round_end_target_bttn_id_arr.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            roundEndSocket = socketIOClient(serverUrl + 'round-end')\r\n\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                round_end_target_bttn_id_arr.length = 0\r\n\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        \r\n                        let id = \"round_end_target_bttn_\" + player,\r\n                        roundEndPlayerId = \"round_end_\" + player\r\n                        \r\n                        round_end_target_bttn_id_arr.push(id)\r\n\r\n                        return(\r\n                            <div key = {player} className=\"in-game-render-players-container-werewolve\">\r\n                                {player === this.props.username ?\r\n                                    <button className=\"grayder-background\" id={id} type=\"button\" onClick={this.ChoosePlayer.bind(this, player)} disabled>{player}</button>\r\n                                    :\r\n                                    <button  id={id} type=\"button\" onClick={this.ChoosePlayer.bind(this, player)}>{player}</button>\r\n                                }\r\n                                <div id={roundEndPlayerId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            \r\n\r\n            roundEndSocket.on('connect', () => {\r\n                roundEndSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            \r\n            timer = setInterval(() => {\r\n                if(setUpTime < 1){\r\n                    this.setState({timerEnds: true})\r\n                    clearInterval(timer)\r\n                }\r\n                else{\r\n                    setUpTime -= 1\r\n                    minute = Math.floor(setUpTime/60)\r\n                    second = Math.floor(setUpTime % 60)\r\n\r\n                    if(second < 10)\r\n                        second = \"0\" + second\r\n                    else\r\n                        second = second\r\n\r\n                    this.setState({renderUI: \r\n                        <>\r\n                        <h3>Morning: {minute +  \":\" + second}</h3>\r\n                        {this.state.renderVotePlayerButton}\r\n                        </>\r\n                    })\r\n                }\r\n            }, 1000)\r\n\r\n            // For players who arrive later, they will catch up with current voting\r\n            roundEndSocket.emit('RequestToGetOtherChoices', this.props.roomid)\r\n\r\n            roundEndSocket.on('OtherKillDecisions', data => {\r\n                for(var key in data){\r\n                    if(data.hasOwnProperty(key)){\r\n                        if(document.getElementById(\"round_end_\"+ key)){\r\n                            document.getElementById(\"round_end_\"+ key).innerText = data[key]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            roundEndSocket.on('GetOtherChoices', data => {\r\n                if(document.getElementById(\"round_end_\"+ data.player))\r\n                    document.getElementById(\"round_end_\"+ data.player).innerText = data.chosenPlayer\r\n                \r\n            })\r\n\r\n            roundEndSocket.on('BroadcastREDeadPlayers', data => {\r\n                clearInterval(timer)\r\n                if(document.getElementById(\"cupid-layer1\") && document.getElementById(\"cupid-layer2\")){\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    let playersGetHang = \"\"\r\n\r\n                    data.forEach((player) => playersGetHang += player + \" \")\r\n\r\n                    this.setState({\r\n                        renderFinalExecutedPlayer: <div><p>Final Executed: <strong>{playersGetHang}</strong></p></div>,\r\n                        endRoundConfirm: <button className=\"end-round-confirm-button\" onClick={this.EndRound}>End Morning</button>\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.renderPlayers !== prevState.renderPlayers){\r\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).disabled = true\r\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).classList.remove(\"grayder-background\")\r\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).classList.add(\"grayder-background\")\r\n        }\r\n\r\n        if(this.state.timerEnds !== prevState.timerEnds && this.state.timerEnds){\r\n            let sendingData = {\r\n                chosenPlayer: this.props.username,\r\n                roomid: this.props.roomid,\r\n                player: this.props.username\r\n            }\r\n\r\n            roundEndSocket.emit(\"RequestToHangPlayer\", sendingData)\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        \r\n        round_end_target_bttn_id_arr.length = 0\r\n\r\n        roundEndSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n\r\n        clearInterval(timer)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>  \r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderChosenExecutedPlayer}\r\n                {this.state.renderFinalExecutedPlayer}\r\n                {this.state.endRoundConfirm}\r\n            </div> \r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\n\r\nimport BearLeader from './RenderBasedOnRoles/BearLeader/BearLeader'\r\nimport Cupid from './RenderBasedOnRoles/Cupid/Cupid'\r\nimport Seer from './RenderBasedOnRoles/Seer/Seer'\r\nimport TheFox from './RenderBasedOnRoles/TheFox/TheFox'\r\nimport ThePiedPiper from './RenderBasedOnRoles/ThePiedPiper/ThePiedPiper'\r\nimport TheSavior from './RenderBasedOnRoles/TheSavior/TheSavior'\r\nimport Werewolves from './RenderBasedOnRoles/Werewolves/Werewolves'\r\nimport Witch from './RenderBasedOnRoles/Witch/Witch'\r\nimport RoundEnd from './RenderBasedOnRoles/RoundEnd/RoundEnd'\r\n\r\nimport \"./InGameRoom.css\"\r\n\r\nimport serverUrl from '../../../serverUrl'\r\n\r\nlet votingRoundSocket,\r\n    votedHangedPlayerSocket,\r\n    InGameSocket,\r\n    adminSocket,\r\n    firstRoundSocket,\r\n    roundEndsSocket\r\n\r\n\r\nclass InGameRoom extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderPlayerRole: null,\r\n        timer: null,\r\n        renderRoleUI: null,\r\n        renderStartBttn: null,\r\n        startBttnClicked: false,\r\n        isAdmin: false,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        admin: '',\r\n        isDead: false,\r\n        roundEnds: false,\r\n        gameEnds: false,\r\n        sideWon: null,\r\n    }\r\n\r\n\r\n    startBttn = () => {\r\n\r\n        InGameSocket.emit('RequestToStartTheGame1stRound', this.props.match.params.roomid)\r\n\r\n        this.setState({\r\n            renderStartBttn: null\r\n        })\r\n    }\r\n\r\n    CloseTheGame = () => {\r\n        let sendingData = {\r\n            username: this.props.match.params.username,\r\n            roomid: this.props.match.params.roomid\r\n        }\r\n        InGameSocket.emit('RequestToCloseGame', sendingData)\r\n    }\r\n\r\n    componentWillMount(){\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n            //Get game info\r\n            InGameSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            InGameSocket.on('connect', () => {\r\n                InGameSocket.emit('GetGameInfo', this.props.match.params.roomid)\r\n                InGameSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            InGameSocket.on('PlayerCloseGame', data => {\r\n                if(data === 'ok'){\r\n                    window.location = '/'\r\n                }\r\n            })\r\n\r\n            //Get admin to broadcast the request to join the game when start button is pressed and to retrieve the game info\r\n            //We need to shrink the number of times that all the players make requests to only one (only admin) so that\r\n            //the server does not need to receive so many redundant incoming requests\r\n\r\n            adminSocket = socketIOClient(serverUrl + 'get-admin', {\r\n                query: {\r\n                    roomid: this.props.match.params.roomid\r\n                }\r\n            })\r\n            \r\n            adminSocket.on('connect', () => {\r\n                adminSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            adminSocket.on('GetAdmin', data => {\r\n                this.setState({admin: data.admin})\r\n                if(this.props.match.params.username === data.admin){\r\n                    this.setState({\r\n                        renderStartBttn: <button className= \"in-game-start-night-button\" type=\"button\" onClick={this.startBttn}>Start the night</button>,\r\n                        isAdmin: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //when the start button is pressed (state is changed), get the game info (this is socket.io's event so that every listener\r\n            //in the room channel will receive the data whenever the event is triggered)\r\n            InGameSocket.on('RetrieveGameInfo', data => {\r\n                data.every((row) => {\r\n                    let found = false\r\n\r\n                    if(!row.special){\r\n                        row.player.every(name => {\r\n                            if(name === this.props.match.params.username){\r\n                                this.setState({\r\n                                    renderPlayerRole: row.name\r\n                                })\r\n\r\n                                if(row.name === \"Werewolves\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <Werewolves roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"Seer/ Fortune Teller\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <Seer roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"Cupid\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <Cupid roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"Witch\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <Witch roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"The savior\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <TheSavior roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"The pied piper\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <ThePiedPiper roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"The fox\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <TheFox roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"The bear leader\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <BearLeader roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n\r\n                                found = true\r\n\r\n                                return false\r\n                            }\r\n\r\n                            else{\r\n                                this.setState({\r\n                                    renderPlayerRole: \"Ordinary Townsfolk\"\r\n                                })\r\n                                return true\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if(found){\r\n                        return false\r\n                    }\r\n\r\n                    else{\r\n                        return true\r\n                    }\r\n                })\r\n                \r\n            })\r\n\r\n            //Handle the first round\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle lover (every character must have)\r\n\r\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\r\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\r\n            \r\n            InGameSocket.on('RevealLovers', (data) => {\r\n                data.forEach((info, index) => {\r\n                    if(info.player === this.props.match.params.username){\r\n                        if(index === 0)\r\n                            this.setState({\r\n                                renderLovers: <p>You are now in love with {data[index+1].player} - {data[index+1].role}</p>\r\n                            })\r\n                        \r\n                        else{\r\n                            this.setState({\r\n                                renderLovers: <p>You are now in love with {data[index-1].player} - {data[index-1].role}</p>\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle changes of the total charmed players via a socket event (every character must have)\r\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\r\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\r\n            \r\n            InGameSocket.emit('RequestToRetrieveCharmPlayers', this.props.match.params.roomid)\r\n\r\n            InGameSocket.on('GetListOfCharmed', (data) => {\r\n                data.every((player) => {\r\n                    if(this.props.match.params.username === player){\r\n                        this.setState({\r\n                            renderCharmedPlayers: data.map((player, index) => {\r\n                                let key = 'charmed_' + index\r\n                                return(\r\n                                    <p key={key}>{player}</p>\r\n                                )\r\n                            })\r\n                        })\r\n\r\n                        return false\r\n                    }\r\n\r\n                    else\r\n                        return true\r\n                })\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            \r\n            //Handle the end of a round meaning the night (every character must have) \r\n            roundEndsSocket = socketIOClient(serverUrl + 'retrieve-round-ends')\r\n            roundEndsSocket.on('connect', () => {\r\n                roundEndsSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            roundEndsSocket.on('RoundEnds', data => {\r\n                if(data.dead instanceof Array)\r\n                    data.dead.forEach((death, i) => {\r\n                        if(this.props.match.params.username === death){\r\n                            this.setState({isDead: true})\r\n                        }\r\n                    })\r\n                \r\n                this.setState({\r\n                    roundEnds: true\r\n                })\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the end of a voting turn meaning the morning (every character must have)\r\n            votingRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            votingRoundSocket.on('connect', () => {\r\n                votingRoundSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            votingRoundSocket.on('StartNewRound', data => {\r\n                if(data === \"Start new round\"){\r\n                    this.setState({\r\n                        roundEnds: false\r\n                    })\r\n\r\n                    if(this.state.isAdmin){\r\n                        this.setState({\r\n                            renderStartBttn: <button className= \"in-game-start-night-button\" type=\"button\" onClick={this.startBttn}>Start the night</button>\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n\r\n            //Get hanged player\r\n            votedHangedPlayerSocket = socketIOClient(serverUrl + 'round-end')\r\n            votedHangedPlayerSocket.on('connect', () => {\r\n                votedHangedPlayerSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            votedHangedPlayerSocket.on('BroadcastREDeadPlayers', data => {\r\n                data.every((player) => {\r\n                    if(this.props.match.params.username === player){\r\n                        this.setState({isDead: true})\r\n                        return false\r\n                    }\r\n                    return true\r\n                })\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the end of the game (every character must have)\r\n            InGameSocket.on('GameEnds', data => {\r\n                if(data === \"Human won\"){\r\n                    this.setState({sideWon: 'Human'})\r\n                }\r\n                else if(data === \"Werewolves won\"){\r\n                    this.setState({sideWon: 'Werewolves'})\r\n                }\r\n                else if(data === \"Piper won\"){\r\n                    this.setState({sideWon: 'Piper'})\r\n                }\r\n                else if(data === \"Lovers won\")\r\n                    this.setState({sideWon: 'Piper'})\r\n\r\n                this.setState({\r\n                    gameEnds: true\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n\r\n        votingRoundSocket.disconnect()\r\n        votedHangedPlayerSocket.disconnect()\r\n        InGameSocket.disconnect()\r\n        adminSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        roundEndsSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n    }\r\n\r\n    ChooseLeftTab = (e) => {\r\n        //Display which left tab is highlighted\r\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"left-icon\").classList.add(\"tab-active\")\r\n\r\n\r\n        //transition to the left tab\r\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\r\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\r\n\r\n        document.getElementById(\"left-tab\").classList.add(\"in-game-user-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.add(\"in-game-role-tab-container-invisible-move-right\")\r\n    }\r\n\r\n    ChooseMiddleTab = () => {\r\n        //Display which middle tab is highlighted\r\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"middle-icon\").classList.add(\"tab-active\")\r\n\r\n\r\n        //transition to the middle tab\r\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\r\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\r\n\r\n    }\r\n\r\n    ChooseRightTab = () => {\r\n        //Display which right tab is highlighted\r\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"right-icon\").classList.add(\"tab-active\")\r\n\r\n        //transition to the right tab\r\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\r\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\r\n\r\n        document.getElementById(\"right-tab\").classList.add(\"in-game-extra-info-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.add(\"in-game-role-tab-container-invisible-move-left\")\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            {/* Header for in game room */}\r\n            <div className=\"in-game-header-container\">\r\n                <button className=\"in-game-header-item-holder\" onClick={this.ChooseLeftTab} id=\"left-icon\">\r\n                    <i className=\"fas fa-user fa-lg\"></i>\r\n                </button>\r\n\r\n                <button className=\"in-game-header-item-holder tab-active\" onClick={this.ChooseMiddleTab} id=\"middle-icon\">\r\n                    <i className=\"fas fa-boxes fa-lg\"></i>\r\n\r\n                </button>\r\n                <button className=\"in-game-header-item-holder\" onClick={this.ChooseRightTab} id=\"right-icon\">\r\n                    <i className=\"fas fa-clipboard-list fa-lg\"></i>\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"in-game-main-container\">\r\n                <div className=\"in-game-title\">\r\n                    <h2>In Game Room</h2>\r\n                </div>\r\n\r\n                {/* Main tab / middle tab*/}\r\n                <div className=\"in-game-role-tab-container\" id=\"middle-tab\">\r\n                    <div className=\"in-game-role-tab-title\">\r\n                        <h4>{this.state.renderPlayerRole}</h4>\r\n                    </div>\r\n\r\n                    {this.state.gameEnds ? \r\n                        <div className=\"in-game-role-tab-main\">\r\n                            <p>{this.state.sideWon} Won!</p>\r\n                            <button onClick={this.CloseTheGame}>Close</button>\r\n                        </div>\r\n                        :\r\n                        <>\r\n                        {!this.state.roundEnds ?\r\n                            <>\r\n                            {this.state.isDead ?\r\n                                <div className=\"in-game-role-tab-main\">\r\n                                    <p>You are dead</p>\r\n                                </div>\r\n                                :\r\n                                <div className=\"in-game-role-tab-main\">\r\n                                    {this.state.renderRoleUI}\r\n                                </div >\r\n                            }\r\n                            </>\r\n                        :\r\n                            <>\r\n                            {this.state.isDead ?\r\n                                <div className=\"in-game-role-tab-main\">\r\n                                    <p>You are dead</p>\r\n                                </div>\r\n    \r\n                                :\r\n    \r\n                                <div className=\"in-game-role-tab-main\">\r\n                                    <RoundEnd roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                </div>\r\n                            }\r\n                            </>\r\n                        }\r\n                        </>\r\n                    }\r\n                    \r\n                    {this.state.renderStartBttn}\r\n                    \r\n                </div>\r\n\r\n                {/* User tab / left tab*/}\r\n                <div className = \"in-game-user-tab-container\" id=\"left-tab\">\r\n                    <div className= \"in-game-room-info-container\">\r\n                        <p>Room ID: {this.props.match.params.roomid} </p>\r\n                        <p>Admin: {this.state.admin}</p>\r\n                        <p>Name: {this.props.match.params.username}</p>\r\n                    </div>\r\n\r\n                    {/* History log container */}\r\n                    <div className= \"in-game-room-history-container\">\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"in-game-role-tab-start-end-button-container\">\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* Extra info tab / right tab */}\r\n                <div className = \"in-game-extra-info-tab-container\" id=\"right-tab\">\r\n                    <div className= \"in-game-lover-info\">\r\n                        {this.state.renderLovers}\r\n                    </div>\r\n\r\n                    <div className= \"in-game-charm-info\">\r\n                        <h4>List of Charmed Players</h4>\r\n                        {this.state.renderCharmedPlayers}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default InGameRoom","import React, { Component } from 'react'\r\nimport './Welcome.css'\r\n\r\nclass Welcome extends Component{\r\n\r\n    state={}\r\n\r\n    playButton = () => {\r\n        this.props.history.push(`/login`)\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n    }    \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Welcome-page-cover\">\r\n                <div className=\"Welcome-page-title\">\r\n                    <h2>The Werewolves of Millers Hollow</h2>\r\n                    <p className=\"small-title-description\">ver. 1.0.0</p>\r\n                </div>\r\n\r\n                <div className=\"Welcome-page-button\">\r\n                    <button onClick={this.playButton}>\r\n                        Play\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"welcome-bottom-link\">\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Welcome","let currentRoles = {\r\n    'Werewolves': 0,\r\n    'Ordinary Townsfolk': 0,\r\n    'Seer/ Fortune Teller': 0,\r\n    // 'Hunter': 0,\r\n    'Cupid': 0,\r\n    'Witch': 0,\r\n    // 'Little Girl': 0,\r\n    // 'Sheriff': 0,\r\n    // 'Thief': 0,\r\n    // 'The village Idiot': 0,\r\n    // 'The ancient': 0,\r\n    // 'The scapegoat': 0,\r\n    'The savior': 0,\r\n    'The pied piper': 0,\r\n    // 'The villager villager': 0,\r\n    // 'The two sisters': 0,\r\n    // 'The three brothers': 0,\r\n    // 'The knight with the rusty sword': 0,\r\n    'The fox': 0,\r\n    'The bear leader': 0,\r\n    // 'The devoted servant': 0,\r\n    // 'The wild child': 0,\r\n    // 'The dog wolf': 0\r\n}\r\n\r\nexport default currentRoles","// const serverUrl = \"http://10.0.0.6:3001/\"\r\n// const serverUrl = \"https://werewolves-of-millers-hollow.herokuapp.com/\"\r\n\r\nconst serverUrl = \"http://159.89.111.33:3001/\"\r\n\r\nexport default serverUrl ","import React, { Component } from 'react'\r\n\r\nimport currentRoles from '../../validation/currentRoles/currentRoles'\r\n\r\nimport serverUrl from '../../serverUrl'\r\nimport \"./Login.css\"\r\n\r\nconst uniqid = require('uniqid')\r\nconst axios = require('axios')\r\n\r\nclass Login extends Component{\r\n\r\n    state={}\r\n\r\n    newRoomButton = () => {\r\n        let roomid = uniqid()\r\n\r\n        let input_player_username_node = document.getElementById(\"input_player_username\")\r\n\r\n        if(input_player_username_node.value.length === 0){\r\n            input_player_username_node.placeholder = \"Please enter a name\"\r\n        }\r\n\r\n        else{\r\n            //Create a player with the input name in players collection and also a room with updated players info\r\n            axios({\r\n                method: 'post',\r\n                url: serverUrl + 'rooms/' + roomid + '/create-player-and-room',\r\n                data: {\r\n                    roomid: roomid,\r\n                    username: input_player_username_node.value,\r\n                    currentRoles: currentRoles\r\n                }\r\n            })\r\n            .then(res => {\r\n                if(res.data === \"ok\"){\r\n                    this.props.history.push(`/waiting-room/` + roomid + `/` + input_player_username_node.value)\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n\r\n    joinButton = () => {\r\n        let input_player_username_node = document.getElementById(\"input_player_username\"),\r\n            input_player_roomid_node = document.getElementById(\"input_player_roomid\")\r\n\r\n        if(input_player_username_node.value.length === 0){\r\n            input_player_username_node.placeholder = \"Please enter a name\"\r\n\r\n            if(input_player_roomid_node.value.length === 0){\r\n                input_player_roomid_node.placeholder = \"Please enter a valid room Id\"\r\n            }\r\n        }\r\n\r\n        else{\r\n            if(input_player_roomid_node.value.length === 0){\r\n                input_player_roomid_node.placeholder = \"Please enter a valid room Id\"\r\n            }\r\n\r\n            else{\r\n                //Check whether the room exists and whether the room contains the name\r\n                axios({\r\n                    method: 'post',\r\n                    url: serverUrl + 'rooms/' + input_player_roomid_node.value + '/get-room-check-username',\r\n                    data: {\r\n                        roomid: input_player_roomid_node.value,\r\n                        username: input_player_username_node.value\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    if(res.data === \"ok\"){\r\n                        this.props.history.push(`/waiting-room/` + input_player_roomid_node.value + `/`  + input_player_username_node.value)\r\n                    }\r\n\r\n                    else if (res.data === \"username exists\"){\r\n                        input_player_username_node.placeholder = \"'\" + input_player_username_node.value + \"' already exists in \" + input_player_roomid_node.value\r\n                        input_player_username_node.value = \"\"\r\n                    }\r\n\r\n                    else {\r\n                        input_player_roomid_node.placeholder = \"'\" + input_player_roomid_node.value + \"' doesn't exist\"\r\n                        input_player_roomid_node.value = \"\"\r\n                    }\r\n                })\r\n                .catch(err => console.log(err))\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n    }\r\n\r\n    componentWillUnmount(){\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login-page-cover\">\r\n                <div className=\"Login-page-title\">\r\n                    <h2>Login Room</h2>\r\n                </div>\r\n\r\n                <div className=\"Login-page-body\">\r\n\r\n                    <input type=\"text\" id=\"input_player_username\" name=\"player_username\" placeholder=\"Name\"/>\r\n\r\n                    <input type=\"text\" id=\"input_player_roomid\" name=\"player_roomid\" placeholder=\"Room ID\"/>\r\n\r\n                    <button className=\"button-of-Login\" type=\"button\" onClick={this.joinButton}>join</button>\r\n\r\n                    <button className=\"button-of-Login create-new-room-button\" type=\"button\" onClick={this.newRoomButton}>Create a Room and Go</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react';\r\nimport \"./Footer.css\"\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"footer-container\">\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react'\r\n\r\nimport socketIOClient from 'socket.io-client'\r\nimport currentRoles from '../../../../validation/currentRoles/currentRoles'\r\nimport serverUrl from '../../../../serverUrl'\r\n\r\nimport \"./DisplayCards.css\"\r\n\r\nclass DisplayCards extends Component {\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderCards: null,\r\n        renderPressedCards: null,\r\n        isCardSelected: false,\r\n        selectedCards: null,\r\n        pressedCards: null,\r\n        currentRoles: null\r\n    }\r\n\r\n    //Used to leave one card out of the current chosen card collection\r\n    decreaseCardBttn = (name, e) => {\r\n        currentRoles[name] -= 1\r\n        \r\n        if(currentRoles[name] < 0 || currentRoles[name] === 0){\r\n            currentRoles[name] = 0\r\n            document.getElementById(name + \"-quantity\").innerText = \"\"\r\n        }\r\n        let name_array = [],\r\n            value_array = []\r\n\r\n        for(var key in currentRoles){\r\n            if(currentRoles.hasOwnProperty(key))\r\n            {\r\n                if(currentRoles[key] > 0){\r\n                    name_array.push(key)\r\n                    value_array.push(currentRoles[key])\r\n                }\r\n                    \r\n            }\r\n        }\r\n        \r\n        name_array.forEach((name, index) => {\r\n            let quantityId = name + \"-quantity\"\r\n            \r\n            if(value_array[index] === 0)\r\n                document.getElementById(quantityId).innerText = \"\"\r\n            else\r\n                document.getElementById(quantityId).innerText = \"x\" + value_array[index]\r\n        })\r\n\r\n        this.setState({\r\n            isCardSelected: true\r\n        })\r\n    }\r\n\r\n    //Used to choose a card and add it to the chosen card collection\r\n    chooseCardBttn = (name, e) => {\r\n        currentRoles[name] += 1\r\n        \r\n        let name_array = [],\r\n            value_array = []\r\n\r\n        for(var key in currentRoles){\r\n            if(currentRoles.hasOwnProperty(key))\r\n            {\r\n                if(currentRoles[key] > 0){\r\n                    name_array.push(key)\r\n                    value_array.push(currentRoles[key])\r\n                }\r\n                    \r\n            }\r\n        }\r\n        \r\n        name_array.forEach((name, index) => {\r\n            let quantityId = name + \"-quantity\"\r\n\r\n            document.getElementById(quantityId).innerText = \"x\" + value_array[index]\r\n        })\r\n\r\n        this.setState({\r\n            isCardSelected: true\r\n        })\r\n    }\r\n\r\n    //Used to submit the card collection to database\r\n    submitCardsBttn = (e) => {\r\n        let sentData = {\r\n            roomid: this.props.roomid,\r\n            currentRoles: currentRoles\r\n        }\r\n\r\n        const socket = socketIOClient(serverUrl + 'submit-selected-cards')\r\n\r\n        socket.on('connect', () => {\r\n            socket.emit('JoinRoom', sentData)\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            const cardSocket = socketIOClient(serverUrl + 'get-cards')\r\n\r\n            cardSocket.on('GetCards', data => {\r\n                this.setState({\r\n                    renderCards: data.map( (card, index) => {\r\n                        let cardId = \"card \" + index,\r\n                            quantityId = card.name + \"-quantity\"\r\n                        return(\r\n                            <div key = {card.name} className=\"card-item\">\r\n                                <button className =\"card-button\" type='button' onClick={this.chooseCardBttn.bind(this, card.name)} id={cardId}>{card.name}</button>\r\n                                <div className=\"card-quantity-holder\">\r\n                                    <p id={quantityId}></p>\r\n                                </div> \r\n                                <i className=\"fas fa-minus-square minus-sign fa-sm\" onClick={this.decreaseCardBttn.bind(this, card.name)}></i>\r\n                            </div>\r\n                        )\r\n                    })\r\n                })\r\n\r\n                //To make sure DOM elements (card-item) show up when below socket's data arrives.\r\n                const socket = socketIOClient(serverUrl + 'get-current-roles')\r\n\r\n                socket.on('connect', () => {\r\n                    socket.emit('JoinRoom', this.props.roomid)\r\n                })\r\n\r\n                socket.on('GetSelectedCards', data => {\r\n                    \r\n                    if(data !== null && this._isMounted){\r\n                        for(var key in data){\r\n                            if(data.hasOwnProperty(key)){\r\n                                currentRoles[key] = data[key]\r\n                            }\r\n                        }\r\n\r\n                        let name_array = [],\r\n                        value_array = []\r\n\r\n                        for(var k in currentRoles){\r\n                            if(currentRoles.hasOwnProperty(k))\r\n                            {\r\n                                if(currentRoles[k] > 0){\r\n                                    name_array.push(k)\r\n                                    value_array.push(currentRoles[k])\r\n                                }\r\n                                    \r\n                            }\r\n                        }\r\n                        \r\n                        name_array.forEach((name, index) => {\r\n                            let quantityId = name + \"-quantity\"\r\n                \r\n                            document.getElementById(quantityId).innerText = \"x\" + value_array[index]\r\n                        })\r\n\r\n                    }\r\n                \r\n                })\r\n            })\r\n\r\n                \r\n        }\r\n    }\r\n    \r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"admin-choose-cards-and-submit-button-container\" id=\"display-cards-container\">\r\n                <div className = \"display-cards-container\">\r\n                    {this.state.renderCards}\r\n                    \r\n                    \r\n                </div>\r\n                <div className=\"submit-card-collection-button-holder\">\r\n                        {this.state.isCardSelected ?\r\n\r\n                                <button type=\"button\" onClick={this.submitCardsBttn.bind(this)}>submit</button>\r\n                                :\r\n                                null\r\n                        }\r\n                </div>\r\n            </div>\r\n            \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default DisplayCards","import React, { Component } from 'react';\r\nimport \"./Header.css\"\r\n\r\n\r\nclass Header extends Component{\r\n\r\n    ChooseUserTab = (e) => {\r\n        //Display which user tab is highlighted\r\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"user-tab-button\").classList.add(\"tab-active\")\r\n\r\n\r\n        //transition to user tab, card collection tab of Admin page is automatically shown at first (firstly visible, others are invisible)\r\n        document.getElementById(\"room-information-container\").classList.remove(\"room-information-container-visible\")\r\n        document.getElementById(\"display-cards-container\").classList.remove(\"display-cards-container-invisible\")\r\n\r\n        document.getElementById(\"room-information-container\").classList.add(\"room-information-container-visible\")\r\n        document.getElementById(\"display-cards-container\").classList.add(\"display-cards-container-invisible\")\r\n    }\r\n\r\n    ChooseCardCollectionTab = () => {\r\n        //Display which card collection tab is highlighted\r\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"card-collection-button\").classList.add(\"tab-active\")\r\n\r\n\r\n        //transition to card collection tab\r\n        document.getElementById(\"room-information-container\").classList.remove(\"room-information-container-visible\")\r\n        document.getElementById(\"display-cards-container\").classList.remove(\"display-cards-container-invisible\")\r\n    }\r\n\r\n    ChooseFinalTab = () => {\r\n        //Display which final tab is highlighted\r\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"final-tab-button\").classList.add(\"tab-active\")\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"header-container header-container-admin\" id=\"header\">\r\n                <button className=\"header-item-holder\" onClick={this.ChooseUserTab} id=\"user-tab-button\">\r\n                    <i className=\"fas fa-user fa-lg\"></i>\r\n                </button>\r\n                <button className=\"header-item-holder tab-active\" onClick={this.ChooseCardCollectionTab} id=\"card-collection-button\">\r\n                    <i className=\"fas fa-boxes fa-lg\"></i>\r\n\r\n                </button>\r\n                <button className=\"header-item-holder\" onClick={this.ChooseFinalTab} id=\"final-tab-button\">\r\n                    <i className=\"fas fa-clipboard-list fa-lg\"></i>\r\n                </button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Route } from 'react-router-dom'\r\nimport Welcome from './components/Welcome/Welcome'\r\nimport Login from './components/Login/Login'\r\nimport Footer from './components/Footer/Footer'\r\nimport {WaitingRoom} from './components/MainPage/WaitingRoom/WaitingRoom'\r\nimport InGameRoom from './components/MainPage/InGameRoom/InGameRoom'\r\n\r\nclass App extends Component {\r\n  \r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Route exact path=\"/\" component={Welcome}/>\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route exact path=\"/waiting-room/:roomid/:username\" component = {WaitingRoom} />\r\n        <Route exact path=\"/in-game-room/:roomid/:username\" component = {InGameRoom} />\r\n\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nimport { CookiesProvider } from 'react-cookie'\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n    <CookiesProvider>\r\n        <App />\r\n    </CookiesProvider>\r\n</BrowserRouter>\r\n,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}