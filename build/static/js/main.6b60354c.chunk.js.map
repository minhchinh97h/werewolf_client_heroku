{"version":3,"sources":["components/MainPage/WaitingRoom/DisplayPlayerNames/DisplayPlayerNames.js","components/MainPage/WaitingRoom/DisplayChosenCards/DisplayChosenCards.js","components/MainPage/WaitingRoom/WaitingRoom.js","components/MainPage/InGameRoom/RenderBasedOnRoles/BearLeader/BearLeader.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Cupid/Cupid.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Seer/Seer.js","components/MainPage/InGameRoom/RenderBasedOnRoles/TheFox/TheFox.js","components/MainPage/InGameRoom/RenderBasedOnRoles/ThePiedPiper/ThePiedPiper.js","components/MainPage/InGameRoom/RenderBasedOnRoles/TheSavior/TheSavior.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Werewolves/Werewolves.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Witch/Witch.js","components/MainPage/InGameRoom/RenderBasedOnRoles/RoundEnd/RoundEnd.js","components/MainPage/InGameRoom/InGameRoom.js","components/Welcome/Welcome.js","validation/currentRoles/currentRoles.js","serverUrl.js","components/Login/Login.js","components/Footer/Footer.js","components/MainPage/WaitingRoom/DisplayCards/DisplayCards.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["DisplayPlayerNamesSocket","GetCurrentRolesSocket","GetAdminSocket","StartGameSocket","firstRoundSocket","bearSocket","calledTurnSocket","getPlayerSocket","getNextTurnSocket","cupidSocket","seerSocket","foxSocket","piperSocket","getCharmedSocket","saviorSocket","otherSocket","witchSocket","timer","minute","second","roundEndSocket","votingRoundSocket","votedHangedPlayerSocket","InGameSocket","adminSocket","roundEndsSocket","Welcome","state","playButton","_this","props","history","push","prevProps","prevState","react_default","a","createElement","className","target","rel","href","onClick","this","Component","currentRoles","Werewolves","Ordinary Townsfolk","Seer/ Fortune Teller","Cupid","Witch","The savior","The pied piper","The fox","The bear leader","serverUrl","uniqid","require","axios","Login","newRoomButton","roomid","input_player_username_node","document","getElementById","value","length","placeholder","method","url","data","username","trim","then","res","catch","err","console","log","joinButton","input_player_roomid_node","type","id","name","Footer","DisplayPlayerNames","_isMounted","renderPlayerNames","_this2","socketIOClient","on","emit","setState","map","player","key","Fragment","DisplayCards","renderCards","renderPressedCards","isCardSelected","selectedCards","pressedCards","decreaseCardBttn","e","innerText","name_array","value_array","hasOwnProperty","forEach","index","quantityId","chooseCardBttn","submitCardsBttn","sentData","socket","card","cardId","bind","k","DisplayChosenCards","renderChosenCards","cards","Header","ChooseUserTab","classList","remove","add","ChooseCardCollectionTab","ChooseFinalTab","WaitingRoom","admin","numberOfPlayers","ifStartGame","renderDisplayCardTabWhetherPlayerIsAdmin","renderStartButtonIfAdmin","startGameBttn","match","params","query","WaitingRoom_DisplayCards_DisplayCards","DisplayChosenCards_DisplayChosenCards_DisplayChosenCards","disconnect","components_Header_Header","DisplayPlayerNames_DisplayPlayerNames_DisplayPlayerNames","bear_target_bttn_ids","players","BearLeader","renderUI","renderPlayers","endTurnConfirm","renderScentTargetNeighbor","renderLovers","renderCharmedPlayers","scentTarget","receiveTurn","PlayerToScent","playersToScent","window","confirm","sendingData","endTurnBttn","role","_this3","cupid_target_bttn_ids","playersToConnect","renderTargetConnection","bttnId","disabled","canUse","seer_target_bttn_ids","Seer","renderTargetRole","playerToRevealBttn","the_fox_target_bttn_ids","playersToReveal_arr","TheFox","playersToRevealBttn","piper_target_bttn_ids","playersToCharm","ThePiedPiper","PlayersToCharm","protectTarget","lastProtectedPlayer","TheSavior","isDead","isSilence","renderSaviorAction","ProtectPlayer","otherWolves","targetChoice","falseRole_arr","target_button_id_arr","renderOtherChoices","choseTarget","renderFinalTarget","renderOwnTarget","renderFalsePickingPhase","didChooseFalseRole","false_role_button_id_arr","false_role_werewolf_id_arr","chooseTargetBttn","wolfName","AgreeOnKill","werewolf","chooseFalseRole","falseRole","Array","every","numberOfWerewolves","otherFalseRoles_arr","werewolvesId","domButton","domName","otherFalseRole","werewolvesIconId","playerHolderId","wolfNode","isContainWolfName","wolf","choice","protectId_buttons","killId_buttons","renderWitchAction","KillPlayerBttn","target_kill","ProtectPlayerBttn","target_protect","UIEndTurnBttn","leftAbilities","killId","protectId","useKill","useHeal","setUpTime","chosenPlayer","round_end_target_bttn_id_arr","RoundEnd","renderChosenExecutedPlayer","renderFinalExecutedPlayer","endRoundConfirm","timerEnds","renderVotePlayerButton","VotePlayer","style","display","ChoosePlayer","EndRound","roundEndPlayerId","setInterval","clearInterval","Math","floor","playersGetHang","InGameRoom","renderPlayerRole","renderRoleUI","renderStartBttn","startBttnClicked","isAdmin","roundEnds","gameEnds","sideWon","startBttn","CloseTheGame","ChooseLeftTab","ChooseMiddleTab","ChooseRightTab","location","row","found","special","RenderBasedOnRoles_Werewolves_Werewolves","RenderBasedOnRoles_Seer_Seer","RenderBasedOnRoles_Cupid_Cupid","RenderBasedOnRoles_Witch_Witch","RenderBasedOnRoles_TheSavior_TheSavior","RenderBasedOnRoles_ThePiedPiper_ThePiedPiper","RenderBasedOnRoles_TheFox_TheFox","RenderBasedOnRoles_BearLeader_BearLeader","info","dead","death","i","RoundEnd_RoundEnd_RoundEnd","App","Route","exact","path","component","components_Footer_Footer","Boolean","hostname","ReactDOM","render","BrowserRouter","es6","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b60354c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport \"./DisplayPlayerNames.css\"\r\n\r\nimport serverUrl from '../../../../serverUrl'\r\n\r\nlet DisplayPlayerNamesSocket\r\n\r\nclass DisplayPlayerNames extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderPlayerNames: null\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        DisplayPlayerNamesSocket = socketIOClient(serverUrl + 'main-page')\r\n        DisplayPlayerNamesSocket.on('connect', () => {\r\n            DisplayPlayerNamesSocket.emit('RequestToGetPlayersAndJoinRoom', this.props.roomid)\r\n        })\r\n\r\n        DisplayPlayerNamesSocket.on('GetBroadCastPlayers', data => \r\n        {\r\n            if(this._isMounted)\r\n                this.setState({renderPlayerNames: data.map(player => {return(<div key = {player} className=\"player-name-holder\"><p>{player}</p></div>)})})\r\n        })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                {this.state.renderPlayerNames}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport {DisplayPlayerNames, DisplayPlayerNamesSocket}","import React, { Component } from 'react'\r\n\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../serverUrl'\r\n\r\nimport './DisplayChosenCards.css'\r\n\r\nlet GetCurrentRolesSocket\r\n\r\nclass DisplayChosenCards extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderChosenCards: null\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n            GetCurrentRolesSocket = socketIOClient(serverUrl + 'get-current-roles')\r\n        \r\n            GetCurrentRolesSocket.on('connect', () => {\r\n                GetCurrentRolesSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            GetCurrentRolesSocket.on('GetSelectedCards', data => {\r\n                if(data !== null){\r\n                    let cards = []\r\n\r\n                    for(var key in data){\r\n                        if(data.hasOwnProperty(key)){\r\n                            if(data[key] > 0)\r\n                                cards.push(key + ' x' + data[key])\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        renderChosenCards: cards.map((data, index) => {\r\n                            let key = 'chosen-roles-' + index\r\n                            return(\r\n                                <div key={key} className=\"chosen-card-container\">\r\n                                    <p>{data}</p>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"display-chosen-cards\">\r\n                {this.state.renderChosenCards}\r\n            </div>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport {DisplayChosenCards, GetCurrentRolesSocket}","import React, { Component } from 'react'\r\n\r\nimport {DisplayPlayerNames, DisplayPlayerNamesSocket} from './DisplayPlayerNames/DisplayPlayerNames'\r\nimport DisplayCards from './DisplayCards/DisplayCards'\r\nimport {DisplayChosenCards, GetCurrentRolesSocket} from './DisplayChosenCards/DisplayChosenCards'\r\n\r\nimport Header from '../../Header/Header'\r\nimport socketIOClient from 'socket.io-client'\r\nimport serverUrl from '../../../serverUrl'\r\nimport \"./WaitingRoom.css\"\r\n\r\n\r\nlet GetAdminSocket,\r\n    StartGameSocket\r\n\r\nclass WaitingRoom extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        admin: \"\",\r\n        numberOfPlayers: 0,\r\n        ifStartGame: false,\r\n        renderDisplayCardTabWhetherPlayerIsAdmin: null,\r\n        renderStartButtonIfAdmin: null\r\n    }\r\n\r\n    startGameBttn = (e) => {\r\n        StartGameSocket.emit('start', this.props.match.params.roomid)\r\n\r\n        this.setState({\r\n            renderStartButtonIfAdmin: null\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            //Display header\r\n            document.getElementById(\"header\").classList.remove(\"hide-header\")\r\n\r\n            //Socket to get admin of the room\r\n            GetAdminSocket = socketIOClient(serverUrl +'get-admin', {\r\n                query: {\r\n                    roomid: this.props.match.params.roomid\r\n                }\r\n            })\r\n\r\n            GetAdminSocket.on('connect', () => {\r\n                GetAdminSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            GetAdminSocket.on('GetAdmin', data => {\r\n                this.setState({\r\n                    admin: data.admin,\r\n                    numberOfPlayers: data.numberOfPlayers\r\n                })\r\n    \r\n                if(this.props.match.params.username === data.admin){\r\n                    this.setState({\r\n                        renderDisplayCardTabWhetherPlayerIsAdmin: <DisplayCards roomid = {this.props.match.params.roomid}\r\n                                                                        admin = {this.state.admin}\r\n                                                                        username = {this.props.match.params.username}\r\n                                                                    />,\r\n                        renderStartButtonIfAdmin:   <div className=\"start-button-container\">\r\n                                                        <button type='button' onClick={this.startGameBttn}>Start</button>\r\n                                                    </div>\r\n                                                                    \r\n                    })\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        renderDisplayCardTabWhetherPlayerIsAdmin: <>\r\n                                                                <div className = \"display-chosen-cards-section\" id=\"display-cards-container\">\r\n                                                                    <div className = \"title-of-chosen-cards-tab\">\r\n                                                                        <h4>Card Collection</h4>\r\n                                                                    </div>\r\n                                                                    <DisplayChosenCards roomid = {this.props.match.params.roomid} />\r\n                                                                </div>\r\n                                                                </>\r\n                    })\r\n                }\r\n            })\r\n            \r\n            StartGameSocket = socketIOClient(serverUrl + 'start-game')\r\n\r\n            StartGameSocket.on('connect', () => {\r\n                StartGameSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n            \r\n            StartGameSocket.on('RedirectToGameRoom', data => {\r\n                if(data === \"ok\")\r\n                    this.props.history.push('/in-game-room/' + this.props.match.params.roomid + '/' + this.props.match.params.username)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        GetAdminSocket.disconnect()\r\n        StartGameSocket.disconnect()\r\n        DisplayPlayerNamesSocket.disconnect()\r\n        if(GetCurrentRolesSocket)\r\n            GetCurrentRolesSocket.disconnect()\r\n    }\r\n    \r\n    componentDidUpdate(prevProps, prevState){\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <Header />\r\n\r\n            <div className=\"waiting-room-container\">\r\n                <div className=\"waiting-room-title\">\r\n                    <h2>Waiting Room</h2>\r\n                </div>\r\n                \r\n                \r\n                <div className=\"waiting-room-main-data-container\" >\r\n                \r\n                    {this.state.renderDisplayCardTabWhetherPlayerIsAdmin}\r\n\r\n                    <div className = \"room-information-container\" id=\"room-information-container\">\r\n                        <div className= \"room-id-and-number-of-players-container\">\r\n                            <p>Room ID: {this.props.match.params.roomid} </p>\r\n                            {/* <p>No. of Players: {this.state.numberOfPlayers} </p> */}\r\n                            <p>Admin: {this.state.admin}</p>\r\n                            <p>Name: {this.props.match.params.username}</p>\r\n                        </div>\r\n\r\n                        <div className = \"display-player-names-container\">\r\n                            <DisplayPlayerNames roomid = {this.props.match.params.roomid} />\r\n                        </div>\r\n\r\n                        {this.state.renderStartButtonIfAdmin}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </>\r\n        ) \r\n    }\r\n}\r\n\r\nexport {WaitingRoom, GetAdminSocket, StartGameSocket}","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet bear_target_bttn_ids = [],\r\n    players = [],\r\n    firstRoundSocket,\r\n    bearSocket,\r\n    calledTurnSocket,\r\n    getPlayerSocket,\r\n    getNextTurnSocket\r\n\r\nclass BearLeader extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        endTurnConfirm: null,\r\n        renderScentTargetNeighbor: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        scentTarget: null,\r\n        receiveTurn: false\r\n    }\r\n\r\n    PlayerToScent = (name, index, e) => {\r\n        let playersToScent = []\r\n        if(index >= 1 && index < players.length - 1){\r\n            playersToScent.push(players[index-1])\r\n            playersToScent.push(players[index+1])\r\n        }\r\n\r\n        else if (index === 0){\r\n            playersToScent.push(players[index + 1])\r\n        }\r\n\r\n        else if(index === players.length - 1){\r\n            playersToScent.push(players[index - 1])\r\n        }\r\n\r\n        if(window.confirm(\"Do you want to scent \" + name +\"?\")){\r\n            let sendingData = {\r\n                roomid: this.props.roomid,\r\n                playersToScent: playersToScent\r\n            }\r\n            bearSocket.emit('RequestToScentPlayer', sendingData)\r\n\r\n\r\n            this.setState({scentTarget : name})\r\n            players.length = 0\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'The bear leader'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n            \r\n            bear_target_bttn_ids.length = 0\r\n\r\n            bearSocket = socketIOClient(serverUrl + 'bear')\r\n\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Who do you want to scent its neighbor?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Who do you want to scent its neighbor?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //Bear's action\r\n            bearSocket.on('ScentPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    renderScentTargetNeighbor: <p>{data ? <>Werewolve(s) exists around <b>{this.state.scentTarget}</b></> : <>There is none of Werewolves around <b>{this.state.scentTarget}</b></>}</p>,\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        \r\n        players.length = 0\r\n        bear_target_bttn_ids.length = 0\r\n\r\n        firstRoundSocket.disconnect()\r\n        bearSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            bear_target_bttn_ids.length = 0\r\n            players.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        players.push(player)\r\n\r\n                        let id = \"bear_target_bttn_\" + index\r\n\r\n                        bear_target_bttn_ids.push(id)\r\n\r\n                        return(\r\n                            <button key = {player} id={id} type=\"button\" onClick={this.PlayerToScent.bind(this, player, index)}>{player}</button>\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderScentTargetNeighbor}\r\n                {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default BearLeader","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nimport \"./Cupid.css\"\r\n\r\nlet cupid_target_bttn_ids = [],\r\n    playersToConnect = [],\r\n    firstRoundSocket,\r\n    cupidSocket,\r\n    calledTurnSocket,\r\n    getNextTurnSocket,\r\n    getPlayerSocket\r\n\r\nclass Cupid extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderTargetConnection: null,\r\n        endTurnConfirm: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null\r\n    }\r\n\r\n    playersToConnect = (name, index, bttnId, e) => {\r\n        if(window.confirm(\"Do you want to choose \" + name + \"?\")){\r\n            playersToConnect.push(name)\r\n\r\n            document.getElementById(bttnId).disabled = true\r\n            document.getElementById(bttnId).classList.remove(\"grayder-background\")\r\n            document.getElementById(bttnId).classList.add(\"grayder-background\")\r\n\r\n            if(playersToConnect.length === 2){\r\n                // const socket = socketIOClient(serverUrl + 'cupid')\r\n\r\n                let sendingData = {\r\n                    roomid: this.props.roomid,\r\n                    playersToConnect: playersToConnect\r\n                }\r\n\r\n                cupidSocket.emit('RequestToConnectPlayers', sendingData)\r\n\r\n                playersToConnect.length = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Cupid'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted) {\r\n            \r\n            //need to set up the socket first, because the when making direct socket to server, server will only response to the received socket\r\n            //meaning socket in an onclick function will get response it that scope, the response will not be received in the socket in componentDidMount\r\n            cupidSocket = socketIOClient(serverUrl + 'cupid')\r\n\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    cupidSocket.emit('RequestToGetCupidAbility', this.props.roomid)\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    cupidSocket.emit('RequestToGetCupidAbility', this.props.roomid)\r\n                }\r\n            })\r\n\r\n            //Cupid's action\r\n            cupidSocket.on('CanUseAbility', canUse => {\r\n                if(canUse){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                                <p>Who do you want to connect?</p>\r\n                        </>\r\n                    })\r\n\r\n                    // to display all the players that are from the room (every character must have)\r\n                    getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n                    getPlayerSocket.on('connect', () => {\r\n                        getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                        getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n                    })\r\n\r\n                    getPlayerSocket.on('GetPlayers', data => {\r\n                        this.setState({\r\n                            renderPlayers: data.map((player, index) => {\r\n                                if(player !== this.props.username){\r\n                                    let id = \"cupid_target_bttn_\" + index\r\n            \r\n                                    cupid_target_bttn_ids.push(id)\r\n            \r\n                                    return(\r\n                                        <button key = {player} id={id} type=\"button\" onClick={this.playersToConnect.bind(this, player, index, id)}>{player}</button>\r\n                                    )\r\n                                }\r\n\r\n                                return ''\r\n                            })\r\n                        })\r\n                    })\r\n                }\r\n\r\n                else{\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    this.setState({\r\n                        renderTargetConnection: <p>You've finished your task, press End Turn.</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            cupidSocket.on('ConnectedPlayers', (data) => {\r\n                playersToConnect = data\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    renderTargetConnection: <p><b>{playersToConnect[0].player}</b> is now connected with <b>{playersToConnect[1].player}</b></p>,\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        playersToConnect.length = 0\r\n\r\n        firstRoundSocket.disconnect()\r\n        cupidSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                    {this.state.renderTargetConnection}\r\n                    {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default Cupid","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet seer_target_bttn_ids = [],\r\n    calledTurnSocket,\r\n    firstRoundSocket,\r\n    seerSocket,\r\n    getNextTurnSocket,\r\n    getPlayerSocket\r\n\r\nclass Seer extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderTargetRole: null,\r\n        endTurnConfirm: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        receiveTurn: false\r\n    }\r\n\r\n    playerToRevealBttn = (name, bttnId, e) => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            player: name\r\n        }\r\n\r\n        if(window.confirm(\"Do you want to view \" + name + \"'s card?\")){\r\n            seerSocket.emit('Request', sendingData)\r\n\r\n            seer_target_bttn_ids.forEach((bttnId, index) => {\r\n                if(document.getElementById(bttnId))\r\n                    document.getElementById(bttnId).disabled = true\r\n            })\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        \r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Seer/ Fortune Teller'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n\r\n        this.setState({endTurnConfirm: null})\r\n    }   \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n        \r\n\r\n        if(this._isMounted){\r\n            \r\n            seer_target_bttn_ids.length = 0\r\n\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    //render UI\r\n                    this.setState({\r\n                        renderUI: <>\r\n                                <p>Who do you want to reveal?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n            \r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    //render UI\r\n                    this.setState({\r\n                        renderUI: <>\r\n                                <p>Who do you want to reveal?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            seerSocket = socketIOClient(serverUrl + 'seer')\r\n\r\n            //Seer's action\r\n            seerSocket.on('RevealPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    renderTargetRole: <p><b>{data.username}</b>'s role is: <b>{data.role}</b></p>,\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        seer_target_bttn_ids.length = 0\r\n\r\n        calledTurnSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        seerSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            seer_target_bttn_ids.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        if(player !== this.props.username){\r\n                            let id = \"seer_target_bttn_\" + index\r\n    \r\n                            seer_target_bttn_ids.push(id)\r\n    \r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" onClick={this.playerToRevealBttn.bind(this, player, id)}>{player}</button>\r\n                            )\r\n                        }\r\n\r\n                        return ''\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <>\r\n                <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                    <div className=\"in-game-render-ui-container\">\r\n                        {this.state.renderUI}\r\n                    </div>\r\n                    \r\n                    <div className=\"in-game-render-players-container\">\r\n                        {this.state.renderPlayers}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                    {this.state.renderTargetRole}\r\n                    {this.state.endTurnConfirm}\r\n                </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default Seer","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nimport './TheFox.css'\r\n\r\nlet the_fox_target_bttn_ids = [],\r\n    players = [],\r\n    playersToReveal_arr = [],\r\n    foxSocket,\r\n    getNextTurnSocket,\r\n    firstRoundSocket,\r\n    calledTurnSocket,\r\n    getPlayerSocket\r\n  \r\nclass TheFox extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderTargetRole: null,\r\n        endTurnConfirm: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        receiveTurn: false\r\n    }\r\n\r\n    playersToRevealBttn = (name, index, e) => {\r\n        if(window.confirm(\"Do you want to scent \" + name + \"?\")){\r\n            playersToReveal_arr.push(name)\r\n\r\n            if(playersToReveal_arr.length === 3){\r\n                let sendingData = {\r\n                    roomid: this.props.roomid,\r\n                    players: playersToReveal_arr\r\n                }\r\n\r\n                foxSocket.emit('RequestToScent', sendingData)\r\n\r\n                the_fox_target_bttn_ids.forEach((bttnId, index) => {\r\n                    document.getElementById(bttnId).disabled = true\r\n                })\r\n            }\r\n           \r\n            if(document.getElementById(\"the_fox_target_bttn_\" + name)){\r\n                document.getElementById(\"the_fox_target_bttn_\" + name).classList.remove(\"grayder-background\")\r\n                document.getElementById(\"the_fox_target_bttn_\" + name).classList.add(\"grayder-background\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'The fox'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }   \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            the_fox_target_bttn_ids.length = 0\r\n            playersToReveal_arr.length = 0\r\n\r\n            foxSocket = socketIOClient(serverUrl + 'the-fox')\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    //render UI\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Choose 3 players to scent?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    //render UI\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Choose 3 players to scent?</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //The Fox's action\r\n            foxSocket.emit('GetCanUseAbility', this.props.roomid)\r\n\r\n            foxSocket.on('CanUseAbility', data => {\r\n                //if the fox loses the ability\r\n                if(!data){\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    this.setState({\r\n                        renderTargetRole: <p>You lost your ability!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            foxSocket.on('GetScentPlayers', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    renderTargetRole: <p>Werewolves among <b>{playersToReveal_arr[0]}</b>, <b>{playersToReveal_arr[1]}</b>, <b>{playersToReveal_arr[2]}</b>? <b>{data ? \"YES\" : \"NO\"}</b></p>,\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        the_fox_target_bttn_ids.length = 0\r\n        playersToReveal_arr.length = 0\r\n\r\n        foxSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            the_fox_target_bttn_ids.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                players = []\r\n\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        if(player !== this.props.username){\r\n                            players.push(player)\r\n                            let id = \"the_fox_target_bttn_\" + player\r\n    \r\n                            the_fox_target_bttn_ids.push(id)\r\n    \r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" onClick={this.playersToRevealBttn.bind(this, player, index)}>{player}</button>\r\n                            )\r\n                        }\r\n\r\n                        return ''\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderTargetRole}\r\n                {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default TheFox","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport \"./ThePiedPiper.css\"\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet piper_target_bttn_ids = [],\r\n    playersToCharm = [],\r\n    piperSocket,\r\n    firstRoundSocket,\r\n    getNextTurnSocket,\r\n    calledTurnSocket,\r\n    getCharmedSocket,\r\n    getPlayerSocket,\r\n    players = []\r\n\r\n\r\nclass ThePiedPiper extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        endTurnConfirm: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        playersToCharm: [],\r\n        receiveTurn: false\r\n    }\r\n\r\n    PlayersToCharm = (name, index, bttnId, e) => {\r\n        if(window.confirm(\"Do you want to charm \" + name + \"?\")){\r\n            playersToCharm.push(name)\r\n\r\n            document.getElementById(bttnId).disabled = true\r\n            document.getElementById(bttnId).classList.remove(\"piper-choose-player-button-disable\")\r\n            document.getElementById(bttnId).classList.add(\"piper-choose-player-button-disable\")\r\n\r\n            if(players.length >= 2){\r\n                if(playersToCharm.length === 2){\r\n                    this.setState({\r\n                        playersToCharm: playersToCharm.map(player => {\r\n                            return player\r\n                        })\r\n                    })\r\n    \r\n                    let sendingData = {\r\n                        roomid: this.props.roomid,\r\n                        playersToCharm: playersToCharm\r\n                    }\r\n    \r\n                    piperSocket.emit('RequestToCharmPlayers', sendingData)\r\n    \r\n                    playersToCharm.length = 0\r\n                }\r\n            }\r\n\r\n            else{\r\n                this.setState({\r\n                    playersToCharm: playersToCharm.map(player => {\r\n                        return player\r\n                    })\r\n                })\r\n\r\n                let sendingData = {\r\n                    roomid: this.props.roomid,\r\n                    playersToCharm: playersToCharm\r\n                }\r\n\r\n                piperSocket.emit('RequestToCharmPlayers', sendingData)\r\n\r\n                playersToCharm.length = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        \r\n        \r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'The pied piper'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            playersToCharm.length = 0\r\n            piper_target_bttn_ids.length = 0\r\n            players.length = 0\r\n            \r\n            piperSocket = socketIOClient(serverUrl + 'piper')\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Please charm 2 people</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Please charm 2 people</p>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //Piper's action\r\n            piperSocket.on('CharmedPlayers', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                this.setState({\r\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                })\r\n            })\r\n\r\n            //Handle changes of the total charmed players via a socket event (every character must have)\r\n            getCharmedSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\r\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\r\n            getCharmedSocket.on('connect', () => {\r\n                getCharmedSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n            \r\n            getCharmedSocket.emit('RequestToRetrieveCharmPlayers', this.props.roomid)\r\n\r\n            getCharmedSocket.on('GetListOfCharmed', (data) => {\r\n                data.forEach((player) => {\r\n                    if(document.getElementById(\"piper_target_bttn_\" + player)){\r\n                        document.getElementById(\"piper_target_bttn_\" + player).classList.remove(\"piper-choose-player-button-disable\")\r\n                        document.getElementById(\"piper_target_bttn_\" + player).classList.add(\"piper-choose-player-button-disable\")\r\n                        document.getElementById(\"piper_target_bttn_\" + player).disabled = true\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n\r\n        playersToCharm.length = 0\r\n        piper_target_bttn_ids.length = 0\r\n        players.length = 0\r\n\r\n        piperSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getCharmedSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            piper_target_bttn_ids.length = 0\r\n            playersToCharm.length = 0\r\n            players.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        if(player !== this.props.username){\r\n                            let id = \"piper_target_bttn_\" + player\r\n    \r\n                            piper_target_bttn_ids.push(id)\r\n                            players.push(player)\r\n    \r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" onClick={this.PlayersToCharm.bind(this, player, index, id)}>{player}</button>\r\n                            )\r\n                        }\r\n\r\n                        return ''\r\n                    })\r\n                })\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                <p>Charmed {this.state.playersToCharm.length === 2 ? <><b>{this.state.playersToCharm[0]}</b> and <b>{this.state.playersToCharm[1]}</b> </> : null}successfully!</p>\r\n                {this.state.endTurnConfirm}\r\n            </div> \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default ThePiedPiper","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet protectTarget = '',\r\n    lastProtectedPlayer = '',\r\n    firstRoundSocket,\r\n    saviorSocket,\r\n    calledTurnSocket,\r\n    getNextTurnSocket,\r\n    getPlayerSocket\r\n\r\n\r\nclass TheSavior extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        isDead: false,\r\n        isSilence: false,\r\n        renderPlayers: null,\r\n        renderUI: null,\r\n        renderSaviorAction: null,\r\n        protectTarget: '',\r\n        receiveTurn: false\r\n    }\r\n\r\n    ProtectPlayer = (name, e) => {\r\n        protectTarget = name\r\n\r\n        if(window.confirm(\"Do you want to protect \" + name + \"?\")){\r\n\r\n            let sendingData = {\r\n                roomid: this.props.roomid,\r\n                protectTarget: protectTarget\r\n            }\r\n\r\n            saviorSocket.emit('RequestToProtectPlayer', sendingData)\r\n\r\n            this.setState({protectTarget})\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'The savior'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            saviorSocket = socketIOClient(serverUrl + 'savior')\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    saviorSocket.emit('RequestToGetLastProtectedPlayer', this.props.roomid)\r\n\r\n                    saviorSocket.on('LastProtectedPlayer', data => {\r\n                        lastProtectedPlayer = data\r\n\r\n                        this.setState({\r\n                            renderUI: <>\r\n                                    <p>Who do you want to protect?</p>\r\n                            </>,\r\n                            receiveTurn: true\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    saviorSocket.emit('RequestToGetLastProtectedPlayer', this.props.roomid)\r\n\r\n                    saviorSocket.on('LastProtectedPlayer', data => {\r\n                        lastProtectedPlayer = data\r\n\r\n                        this.setState({\r\n                            renderUI: <>\r\n                                    <p>Who do you want to protect?</p>\r\n                            </>,\r\n                            receiveTurn: true\r\n                        })\r\n                    })\r\n                }\r\n            })\r\n\r\n            \r\n\r\n            //Savior's action\r\n            saviorSocket.on('ProtectedPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                if(data === 'ok'){\r\n                    \r\n\r\n                    this.setState({\r\n                        renderSaviorAction: <p><b>{this.state.protectTarget}</b> is protected!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n\r\n        firstRoundSocket.disconnect()\r\n        saviorSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        let id = \"savior_target_bttn_\" + player\r\n\r\n                        if(player === lastProtectedPlayer)\r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" className=\"grayder-background\" onClick={this.ProtectPlayer.bind(this, player)} disabled>{player}</button>\r\n                            )\r\n\r\n                        else\r\n                            return(\r\n                                <button key = {player} id={id} type=\"button\" onClick={this.ProtectPlayer.bind(this, player)}>{player}</button>\r\n                            )\r\n                    })\r\n                })\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderSaviorAction}\r\n                {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default TheSavior","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nimport \"./Werewolves.css\"\r\n\r\nlet otherWolves = [],\r\n    targetChoice = '',\r\n    falseRole_arr = [],\r\n    target_button_id_arr = []\r\n\r\nlet otherSocket, //werewolves namespace\r\n    getPlayerSocket,\r\n    firstRoundSocket,\r\n    calledTurnSocket,\r\n    getNextTurnSocket\r\n\r\nclass Werewolves extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderLovers: null,\r\n        endTurnConfirm: null,\r\n        renderOtherChoices: null,\r\n        choseTarget: null,\r\n        renderCharmedPlayers: null,\r\n        renderFinalTarget: null,\r\n        renderOwnTarget: null,\r\n        receiveTurn: false,\r\n        renderFalsePickingPhase: null,\r\n        didChooseFalseRole: false,\r\n        false_role_button_id_arr: [],\r\n        false_role_werewolf_id_arr: [],\r\n\r\n    }\r\n\r\n    chooseTargetBttn = (name, e) => {\r\n        targetChoice = name\r\n\r\n        let sendingData = {\r\n            choseTarget: name,\r\n            wolfName: this.props.username,\r\n            roomid: this.props.roomid\r\n        }\r\n\r\n        otherSocket.emit(\"RequestMyChoice\", sendingData)\r\n\r\n        this.setState({choseTarget: <p>{targetChoice}</p>})\r\n    }\r\n\r\n    AgreeOnKill = (e) => {\r\n        if(window.confirm(\"Kill \" + targetChoice + \"?\")){\r\n            let sendingData = {\r\n                choseTarget: targetChoice,\r\n                roomid: this.props.roomid,\r\n                werewolf: this.props.username\r\n            }\r\n\r\n            otherSocket.emit(\"RequestToAgreeKill\", sendingData)\r\n            otherSocket.emit(\"RequestToNotifyOther\", sendingData)\r\n\r\n            this.setState({\r\n                // renderOwnTarget: <p>Choice: <strong>{targetChoice}</strong></p>,\r\n                renderUI: <span>Waiting for other players ...</span>\r\n            })\r\n\r\n            \r\n            target_button_id_arr.forEach((id) => {\r\n                document.getElementById(id).disabled = true\r\n            })\r\n        }\r\n    }\r\n\r\n    chooseFalseRole = (falseRole, e) => {\r\n        if(window.confirm(\"choose false role: \" + falseRole + \"?\")){\r\n            let sendingData = {\r\n                falseRole: falseRole,\r\n                wolfName: this.props.username,\r\n                roomid: this.props.roomid\r\n            }\r\n    \r\n            otherSocket.emit(\"RequestFalseRoleChoice\", sendingData)\r\n\r\n            falseRole_arr.forEach((falseRole) => {\r\n                document.getElementById(\"false_role_bttn_\" + falseRole).disabled = true\r\n                document.getElementById(\"false_role_bttn_\" + falseRole).classList.remove(\"grayder-background\")\r\n                document.getElementById(\"false_role_bttn_\" + falseRole).classList.add(\"grayder-background\")\r\n            })\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Werewolves',\r\n            player: this.props.username\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n\r\n        this.setState({endTurnConfirm: null})\r\n\r\n        this.setState({receiveTurn: false})\r\n    }  \r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                \r\n                if(data instanceof Array){\r\n                    data.every(player => {\r\n                        if(player === this.props.username){\r\n                            this.setState({receiveTurn: true})\r\n                            //render UI\r\n                            this.setState({\r\n                                renderUI: <>\r\n                                        <p>Who do you want to kill?</p>\r\n                                        <button className=\"agree-on-kill-button\" onClick={this.AgreeOnKill} id=\"agree-on-kill-button\">Agree on Kill</button>\r\n                                </>\r\n                            })\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    })\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data instanceof Array){\r\n                    data.every(player => {\r\n                        if(player === this.props.username){\r\n                            this.setState({receiveTurn: true})\r\n                            //render UI\r\n                            this.setState({\r\n                                renderUI: <>\r\n                                        <p>Who do you want to kill?</p>\r\n                                        <button className=\"agree-on-kill-button\" onClick={this.AgreeOnKill} id=\"agree-on-kill-button\">Agree on Kill</button>\r\n                                </>\r\n                            })\r\n                            return false\r\n                        }\r\n\r\n                        return true\r\n                    })\r\n                }\r\n                \r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n            //Handle other werewolves choices && confirmation that the kill target is saved into database && final target\r\n            otherSocket = socketIOClient(serverUrl + 'werewolves')\r\n\r\n            //Join room for the werewolves namespace\r\n            otherSocket.on('connect', () => {\r\n                otherSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //confirmation\r\n            otherSocket.on('ConfirmKillRespond', data => {\r\n                if(data === \"all werewolves voted\"){\r\n\r\n                    let sendingData = {\r\n                        roomid: this.props.roomid,\r\n                        numberOfWerewolves: otherWolves.length + 1\r\n                    }\r\n                    otherSocket.emit('GetFalseRoles', sendingData)\r\n\r\n                    otherSocket.on('FalseRoles', data => {\r\n                        falseRole_arr = data\r\n                        let otherFalseRoles_arr = []\r\n\r\n                        otherSocket.emit('RequestToGetOtherFalseRoles', this.props.roomid)\r\n\r\n                        otherSocket.on('OtherFalseRoles', data => {\r\n                            otherFalseRoles_arr = data\r\n\r\n                            this.setState({ \r\n                                renderFalsePickingPhase: falseRole_arr.map((falseRole, index) => {\r\n                                    let bttnId = \"false_role_bttn_\" + falseRole,\r\n                                        werewolvesId = \"false_role_werewolf_\" + falseRole\r\n    \r\n                                    let domButton = <button id={bttnId} onClick={this.chooseFalseRole.bind(this, falseRole)}>{falseRole}</button>,\r\n                                        domName = <div id={werewolvesId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\r\n                                            \r\n    \r\n                                    otherFalseRoles_arr.every((otherFalseRole) => {\r\n                                        if(otherFalseRole.falseRole === falseRole){\r\n                                            domButton = <button id={bttnId} className=\"grayder-background\" disabled>{falseRole}</button>\r\n                                            domName = <div id={werewolvesId} className=\"in-game-render-players-container-werewolve-chosen\">{otherFalseRole.wolfName}</div>\r\n                                            return false\r\n                                        }\r\n                                        return true\r\n                                    })\r\n    \r\n                                    return(\r\n                                        <div key={falseRole} className=\"in-game-render-players-container-werewolve\">\r\n                                            {domButton}\r\n                                            {domName}\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            })\r\n                        })\r\n                    })\r\n\r\n                    otherSocket.on('FalseRoleChoice', data => {\r\n\r\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).disabled = true\r\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).classList.remove(\"grayder-background\")\r\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).classList.add(\"grayder-background\")\r\n\r\n                        document.getElementById(\"false_role_werewolf_\" + data.falseRole).innerText = data.wolfName\r\n                    })\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    this.setState({\r\n                        endTurnConfirm: <button className=\"werewolves-end-turn-button\" type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n\r\n        otherSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn !== prevState.receiveTurn && this.state.receiveTurn){\r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                target_button_id_arr.length = 0\r\n\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        let id = \"werewolves_target_bttn_\" + player,\r\n                            werewolvesIconId = \"werewolves_icon_\" + player,\r\n                            playerHolderId = \"player_holder_\" + player\r\n                        \r\n                        target_button_id_arr.push(id)\r\n\r\n                        return(\r\n                            <div key = {player} className=\"in-game-render-players-container-werewolve\" id={playerHolderId}>\r\n                                <button  id={id} type=\"button\" onClick={this.chooseTargetBttn.bind(this, player)}>{player}</button>\r\n                                <div id={werewolvesIconId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                })\r\n\r\n                \r\n                \r\n\r\n                //Request to get other werewolves in this specific socket\r\n                otherSocket.emit('RequestToGetOtherWerewolves', this.props.roomid)\r\n\r\n                otherSocket.on('GetOtherWerewolves', data => {\r\n                    data.forEach((player) => {\r\n                        if(document.getElementById(\"werewolves_target_bttn_\" + player)){\r\n                            let wolfNode = document.getElementById(\"werewolves_target_bttn_\" + player)\r\n                            wolfNode.innerText += \" (Wolf)\"\r\n                            wolfNode.classList.remove(\"grayder-background\")\r\n                            wolfNode.classList.add(\"grayder-background\")\r\n                            wolfNode.disabled = true\r\n                        }\r\n                    })\r\n                })\r\n\r\n                \r\n\r\n                //others choices\r\n                otherSocket.on('OtherChoices', (data) => {\r\n                    //to advoid duplication\r\n                    let isContainWolfName = false\r\n                    otherWolves.length = 0\r\n                    \r\n                    otherWolves.forEach((wolf, index) => {\r\n                        if(wolf.wolfName === data.wolfName){\r\n                            wolf.choseTarget = data.choseTarget\r\n                            isContainWolfName = true\r\n                        }\r\n                    })\r\n\r\n                    if(!isContainWolfName){\r\n                        otherWolves.push(data)\r\n                    }\r\n\r\n                    otherWolves.forEach((choice) => {\r\n                        if(document.getElementById(\"werewolves_icon_\"+ choice.wolfName))\r\n                        document.getElementById(\"werewolves_icon_\"+ choice.wolfName).innerText = choice.choseTarget\r\n                    })\r\n                })\r\n                \r\n                /* <-----------------------------------------------> */\r\n                otherSocket.on('OtherNotified', data => {\r\n                    document.getElementById(\"player_holder_\" + data.werewolf).classList.remove(\"player-holder-grayer-background\")\r\n                    document.getElementById(\"player_holder_\" + data.werewolf).classList.add(\"player-holder-grayer-background\")\r\n                })\r\n\r\n                //Final target\r\n                otherSocket.on('ReceiveTheFinalTarget', data => {\r\n                    this.setState({\r\n                        renderFinalTarget: <p>Killed: <strong>{data}</strong></p>\r\n                    })\r\n                })\r\n            })\r\n        }\r\n\r\n\r\n        if(this.state.renderPlayers !== null && this.state.renderPlayers !== prevState.renderPlayers){\r\n            //Request to get other werewolves choices when the player arrives later\r\n            otherSocket.emit('RequestToGetOtherChoices', this.props.roomid)\r\n\r\n            otherSocket.on('GetOtherChoices', data => {\r\n                for(var key in data){\r\n                    if(data.hasOwnProperty(key)){\r\n                        if(document.getElementById(\"werewolves_icon_\" + key) && data[key].length > 0){\r\n                            document.getElementById(\"werewolves_icon_\"+ key).innerText = data[key]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            //Request to get other werewolves kill decisions when the player arrives later\r\n            otherSocket.emit('RequestToGetOtherKillDecisions', this.props.roomid)\r\n\r\n            otherSocket.on('OtherKillDecisions', data => {\r\n                for(var key in data){\r\n                    if(data.hasOwnProperty(key)){\r\n                        if(document.getElementById(\"player_holder_\" + key) && data[key].length > 0){\r\n                            document.getElementById(\"player_holder_\" + key).classList.remove(\"player-holder-grayer-background\")\r\n                            document.getElementById(\"player_holder_\" + key).classList.add(\"player-holder-grayer-background\")\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>  \r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                <div className=\"werewolves-announce-holder\">\r\n                    <div className=\"werewolves-annouce-words\">\r\n                        {/* {this.state.renderOwnTarget} */}\r\n                        {this.state.renderFinalTarget}\r\n                    </div>\r\n                    {this.state.endTurnConfirm}\r\n                </div>\r\n                \r\n                <div className=\"werewolves-false-phase-holder\">\r\n                    {this.state.renderFalsePickingPhase}\r\n                </div>\r\n            </div> \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default Werewolves","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport \"./Witch.css\"\r\nimport serverUrl from '../../../../../serverUrl'\r\n\r\nlet target = '',\r\n    protectId_buttons = [],\r\n    killId_buttons = [],\r\n    witchSocket,\r\n    firstRoundSocket,\r\n    calledTurnSocket,\r\n    getPlayerSocket,\r\n    getNextTurnSocket\r\n\r\n\r\nclass Witch extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderPlayers: null,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        renderUI: null,\r\n        endTurnConfirm: null,\r\n        renderWitchAction: null,\r\n        target: '',\r\n        receiveTurn: false\r\n    }\r\n\r\n    KillPlayerBttn = (name, e) => {\r\n        target = name\r\n\r\n        if(window.confirm(\"Do you want to kill \" + name + \"?\")){\r\n            let sendingData = {\r\n                roomid: this.props.roomid,\r\n                target_kill: name\r\n            }\r\n            \r\n            witchSocket.emit('RequestToKillPlayer', sendingData)\r\n\r\n            this.setState({target})\r\n        }\r\n    }\r\n\r\n    ProtectPlayerBttn = (name, e) => {\r\n        target = name\r\n\r\n        if(window.confirm(\"Do you want to save \" + name + \"?\")){\r\n            let sendingData = {\r\n                roomid: this.props.roomid,\r\n                target_protect: name\r\n            }\r\n    \r\n            witchSocket.emit('RequestToProtectPlayer', sendingData)\r\n\r\n            this.setState({target})\r\n        }\r\n    }\r\n\r\n    endTurnBttn = () => {\r\n        \r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Witch'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n        this.setState({endTurnConfirm: null})\r\n\r\n    } \r\n\r\n    UIEndTurnBttn = (e) => {\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            role: 'Witch'\r\n        }\r\n\r\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\r\n\r\n        this.setState({renderWitchAction: <p>You chose to end turn.</p>})\r\n        document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n        document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n        document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n        document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n        document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n        document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n        \r\n        if(this._isMounted){\r\n            protectId_buttons.length = 0\r\n            killId_buttons.length = 0\r\n            \r\n            witchSocket = socketIOClient(serverUrl + 'witch')\r\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the first round (every character must have)\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            firstRoundSocket.on('connect', () => {\r\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \r\n            firstRoundSocket.on('Retrieve1stTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                                <p>Choose your target to kill and to protect?</p>\r\n                                <button id=\"UI-end-turn-button\" className=\"end-turn-witch-button\" onClick={this.UIEndTurnBttn}>End turn</button>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the called turn (every character must have)\r\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\r\n\r\n            calledTurnSocket.on('connect', () => {\r\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            calledTurnSocket.on('getNextTurn', data => {\r\n                if(data === this.props.username){\r\n                    this.setState({\r\n                        renderUI: <>\r\n                            <p>Choose your target to kill and to protect?</p>\r\n                            <button className=\"end-turn-witch-button\" onClick={this.UIEndTurnBttn}>End turn</button>\r\n                        </>,\r\n                        receiveTurn: true\r\n                    })\r\n                }\r\n            })\r\n            \r\n            //witch's action\r\n            witchSocket.on('KillPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                if(data === 'ok'){\r\n                    this.setState({\r\n                        renderWitchAction: <p><b>{this.state.target}</b> Killed!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n\r\n                else if(data === 'No Kill Potion Left'){\r\n                    this.setState({\r\n                        renderWitchAction: <p>No Kill Potion Left!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n\r\n            witchSocket.on('ProtectPlayer', (data) => {\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                if(data === 'ok'){\r\n                    this.setState({\r\n                        renderWitchAction: <p><b>{this.state.target}</b> Saved!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n\r\n                else if(data === 'No Heal Potion Left'){\r\n                    this.setState({\r\n                        renderWitchAction: <p>No Heal Potion Left!</p>,\r\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        protectId_buttons.length = 0\r\n        killId_buttons.length = 0\r\n\r\n        witchSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        calledTurnSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n        getNextTurnSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\r\n            protectId_buttons.length = 0\r\n            killId_buttons.length = 0\r\n            \r\n            // to display all the players that are from the room (every character must have)\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n\r\n                witchSocket.emit('RequestToRetrieveLeftAbilities', this.props.roomid)\r\n\r\n                witchSocket.on('LeftAbilities', leftAbilities => {\r\n                    this.setState({\r\n                        renderPlayers: data.map((player, index) => {\r\n                            let id = \"witch_target_bttn_\" + index,\r\n                                killId = \"witch_kill_bttn_\" + index,\r\n                                protectId = \"witch_protect_bttn\" + index\r\n                            protectId_buttons.push(protectId)\r\n                            killId_buttons.push(killId)\r\n                            \r\n                            return(\r\n                                <div key = {player}>\r\n                                    <p id={id}>{player}</p>\r\n                                    <div>\r\n                                        \r\n                                        {!leftAbilities.useKill && (player !== this.props.username) ? <button id={killId} onClick={this.KillPlayerBttn.bind(this, player)}>Kill</button>: null}\r\n                                        {!leftAbilities.useHeal ? <button id={protectId} onClick={this.ProtectPlayerBttn.bind(this, player)}>Protect</button> : null}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderWitchAction}\r\n                {this.state.endTurnConfirm}\r\n            </div>  \r\n            </>\r\n        )\r\n    }\r\n}   \r\n\r\nexport default Witch","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\nimport serverUrl from '../../../../../serverUrl'\r\nimport \"./RoundEnd.css\"\r\n\r\nlet setUpTime = 600, //10mins,\r\n    chosenPlayer = \"\",\r\n    timer,\r\n    round_end_target_bttn_id_arr = [],\r\n    minute, second\r\n\r\nlet roundEndSocket, //round-end namespace\r\n    getPlayerSocket \r\n\r\nexport default class RoundEnd extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderUI: null,\r\n        renderPlayers: null,\r\n        renderChosenExecutedPlayer: null,\r\n        renderFinalExecutedPlayer: null,\r\n        endRoundConfirm: null,\r\n        timerEnds: false,\r\n        renderVotePlayerButton: null\r\n    }\r\n\r\n    VotePlayer = () => {\r\n        if(window.confirm(\"Hang \" + chosenPlayer + \"?\")){\r\n            let sendingData = {\r\n                chosenPlayer: chosenPlayer,\r\n                roomid: this.props.roomid,\r\n                player: this.props.username\r\n            }\r\n\r\n            roundEndSocket.emit(\"RequestToHangPlayer\", sendingData)\r\n\r\n            this.setState({renderChosenExecutedPlayer: <p>Your Choice: <b>{chosenPlayer}</b></p>})\r\n\r\n            document.getElementById(\"vote-hanged-button\").style.display = \"none\"\r\n\r\n            round_end_target_bttn_id_arr.forEach(id => {\r\n                document.getElementById(id).disabled = true\r\n                document.getElementById(id).classList.remove('grayder-background')\r\n                document.getElementById(id).classList.add('grayder-background')\r\n            })\r\n        }\r\n    }\r\n\r\n    ChoosePlayer = (name, e) => {\r\n        chosenPlayer = name\r\n\r\n        let sendingData = {\r\n            chosenPlayer: chosenPlayer,\r\n            player: this.props.username,\r\n            roomid: this.props.roomid\r\n        }\r\n\r\n        roundEndSocket.emit(\"BroadCastMyChoice\", sendingData)\r\n\r\n        this.setState({\r\n            renderVotePlayerButton: <button id=\"vote-hanged-button\" className=\"vote-hanged-button\" onClick={this.VotePlayer}>Vote</button>\r\n        })\r\n    }\r\n\r\n    EndRound = () => {\r\n\r\n        let sendingData = {\r\n            roomid: this.props.roomid,\r\n            player: this.props.username\r\n        }\r\n\r\n        roundEndSocket.emit('RequestToEndRound', sendingData)\r\n\r\n        this.setState({endRoundConfirm: null})\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n            round_end_target_bttn_id_arr.length = 0\r\n\r\n            // to display all the players that are from the room (every character must have)\r\n            roundEndSocket = socketIOClient(serverUrl + 'round-end')\r\n\r\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\r\n\r\n            getPlayerSocket.on('connect', () => {\r\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\r\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\r\n            })\r\n\r\n            getPlayerSocket.on('GetPlayers', data => {\r\n                round_end_target_bttn_id_arr.length = 0\r\n\r\n                this.setState({\r\n                    renderPlayers: data.map((player, index) => {\r\n                        \r\n                        let id = \"round_end_target_bttn_\" + player,\r\n                        roundEndPlayerId = \"round_end_\" + player\r\n                        \r\n                        round_end_target_bttn_id_arr.push(id)\r\n\r\n                        return(\r\n                            <div key = {player} className=\"in-game-render-players-container-werewolve\">\r\n                                {player === this.props.username ?\r\n                                    <button className=\"grayder-background\" id={id} type=\"button\" onClick={this.ChoosePlayer.bind(this, player)} disabled>{player}</button>\r\n                                    :\r\n                                    <button  id={id} type=\"button\" onClick={this.ChoosePlayer.bind(this, player)}>{player}</button>\r\n                                }\r\n                                <div id={roundEndPlayerId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            \r\n\r\n            roundEndSocket.on('connect', () => {\r\n                roundEndSocket.emit('JoinRoom', this.props.roomid)\r\n            })\r\n\r\n            \r\n            timer = setInterval(() => {\r\n                if(setUpTime < 1){\r\n                    this.setState({timerEnds: true})\r\n                    clearInterval(timer)\r\n                }\r\n                else{\r\n                    setUpTime -= 1\r\n                    minute = Math.floor(setUpTime/60)\r\n                    second = Math.floor(setUpTime % 60)\r\n\r\n                    if(second < 10)\r\n                        second = \"0\" + second\r\n\r\n                    this.setState({renderUI: \r\n                        <>\r\n                        <h3>Morning: {minute +  \":\" + second}</h3>\r\n                        \r\n                        </>\r\n                    })\r\n                }\r\n            }, 1000)\r\n\r\n            // For players who arrive later, they will catch up with current voting\r\n            roundEndSocket.emit('RequestToGetOtherChoices', this.props.roomid)\r\n\r\n            roundEndSocket.on('OtherKillDecisions', data => {\r\n                for(var key in data){\r\n                    if(data.hasOwnProperty(key)){\r\n                        if(document.getElementById(\"round_end_\"+ key)){\r\n                            document.getElementById(\"round_end_\"+ key).innerText = data[key]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            roundEndSocket.on('GetOtherChoices', data => {\r\n                if(document.getElementById(\"round_end_\"+ data.player))\r\n                    document.getElementById(\"round_end_\"+ data.player).innerText = data.chosenPlayer\r\n                \r\n            })\r\n\r\n            roundEndSocket.on('BroadcastREDeadPlayers', data => {\r\n                clearInterval(timer)\r\n                if(document.getElementById(\"cupid-layer1\") && document.getElementById(\"cupid-layer2\")){\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\r\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\r\n\r\n                    let playersGetHang = \"\"\r\n\r\n                    data.forEach((player) => playersGetHang += player + \" \")\r\n\r\n                    this.setState({\r\n                        renderFinalExecutedPlayer: <div><p>Final Executed: <strong>{playersGetHang}</strong></p></div>,\r\n                        endRoundConfirm: <button className=\"end-round-confirm-button\" onClick={this.EndRound}>End Morning</button>\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        if(this.state.renderPlayers !== prevState.renderPlayers){\r\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).disabled = true\r\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).classList.remove(\"grayder-background\")\r\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).classList.add(\"grayder-background\")\r\n        }\r\n\r\n        if(this.state.timerEnds !== prevState.timerEnds && this.state.timerEnds){\r\n            let sendingData = {\r\n                chosenPlayer: this.props.username,\r\n                roomid: this.props.roomid,\r\n                player: this.props.username\r\n            }\r\n\r\n            roundEndSocket.emit(\"RequestToHangPlayer\", sendingData)\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n        \r\n        round_end_target_bttn_id_arr.length = 0\r\n\r\n        roundEndSocket.disconnect()\r\n        getPlayerSocket.disconnect()\r\n\r\n        clearInterval(timer)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>  \r\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\r\n                    \r\n                <div className=\"in-game-render-ui-container\">\r\n                    {this.state.renderUI}\r\n                    {this.state.renderVotePlayerButton}\r\n                </div>\r\n                \r\n                <div className=\"in-game-render-players-container\">\r\n                    {this.state.renderPlayers}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\r\n                {this.state.renderChosenExecutedPlayer}\r\n                {this.state.renderFinalExecutedPlayer}\r\n                {this.state.endRoundConfirm}\r\n            </div> \r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\n\r\nimport BearLeader from './RenderBasedOnRoles/BearLeader/BearLeader'\r\nimport Cupid from './RenderBasedOnRoles/Cupid/Cupid'\r\nimport Seer from './RenderBasedOnRoles/Seer/Seer'\r\nimport TheFox from './RenderBasedOnRoles/TheFox/TheFox'\r\nimport ThePiedPiper from './RenderBasedOnRoles/ThePiedPiper/ThePiedPiper'\r\nimport TheSavior from './RenderBasedOnRoles/TheSavior/TheSavior'\r\nimport Werewolves from './RenderBasedOnRoles/Werewolves/Werewolves'\r\nimport Witch from './RenderBasedOnRoles/Witch/Witch'\r\nimport RoundEnd from './RenderBasedOnRoles/RoundEnd/RoundEnd'\r\n\r\nimport \"./InGameRoom.css\"\r\n\r\nimport serverUrl from '../../../serverUrl'\r\n\r\nlet votingRoundSocket,\r\n    votedHangedPlayerSocket,\r\n    InGameSocket,\r\n    adminSocket,\r\n    firstRoundSocket,\r\n    roundEndsSocket\r\n\r\n\r\nclass InGameRoom extends Component{\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderPlayerRole: null,\r\n        timer: null,\r\n        renderRoleUI: null,\r\n        renderStartBttn: null,\r\n        startBttnClicked: false,\r\n        isAdmin: false,\r\n        renderLovers: null,\r\n        renderCharmedPlayers: null,\r\n        admin: '',\r\n        isDead: false,\r\n        roundEnds: false,\r\n        gameEnds: false,\r\n        sideWon: null,\r\n    }\r\n\r\n\r\n    startBttn = () => {\r\n\r\n        InGameSocket.emit('RequestToStartTheGame1stRound', this.props.match.params.roomid)\r\n\r\n        this.setState({\r\n            renderStartBttn: null\r\n        })\r\n    }\r\n\r\n    CloseTheGame = () => {\r\n        let sendingData = {\r\n            username: this.props.match.params.username,\r\n            roomid: this.props.match.params.roomid\r\n        }\r\n        InGameSocket.emit('RequestToCloseGame', sendingData)\r\n    }\r\n\r\n    componentWillMount(){\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n            //Get game info\r\n            InGameSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            InGameSocket.on('connect', () => {\r\n                InGameSocket.emit('GetGameInfo', this.props.match.params.roomid)\r\n                InGameSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            InGameSocket.on('PlayerCloseGame', data => {\r\n                if(data === 'ok'){\r\n                    window.location = '/'\r\n                }\r\n            })\r\n\r\n            //Get admin to broadcast the request to join the game when start button is pressed and to retrieve the game info\r\n            //We need to shrink the number of times that all the players make requests to only one (only admin) so that\r\n            //the server does not need to receive so many redundant incoming requests\r\n\r\n            adminSocket = socketIOClient(serverUrl + 'get-admin', {\r\n                query: {\r\n                    roomid: this.props.match.params.roomid\r\n                }\r\n            })\r\n            \r\n            adminSocket.on('connect', () => {\r\n                adminSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            adminSocket.on('GetAdmin', data => {\r\n                this.setState({admin: data.admin})\r\n                if(this.props.match.params.username === data.admin){\r\n                    this.setState({\r\n                        renderStartBttn: <button className= \"in-game-start-night-button\" type=\"button\" onClick={this.startBttn}>Start the night</button>,\r\n                        isAdmin: true\r\n                    })\r\n                }\r\n            })\r\n\r\n            //when the start button is pressed (state is changed), get the game info (this is socket.io's event so that every listener\r\n            //in the room channel will receive the data whenever the event is triggered)\r\n            InGameSocket.on('RetrieveGameInfo', data => {\r\n                data.every((row) => {\r\n                    let found = false\r\n\r\n                    if(!row.special){\r\n                        row.player.every(name => {\r\n                            if(name === this.props.match.params.username){\r\n                                this.setState({\r\n                                    renderPlayerRole: row.name\r\n                                })\r\n\r\n                                if(row.name === \"Werewolves\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <Werewolves roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"Seer/ Fortune Teller\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <Seer roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"Cupid\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <Cupid roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"Witch\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <Witch roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"The savior\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <TheSavior roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"The pied piper\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <ThePiedPiper roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"The fox\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <TheFox roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n                                else if(row.name === \"The bear leader\"){\r\n                                    this.setState({\r\n                                        renderRoleUI: <BearLeader roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                    })\r\n                                }\r\n\r\n\r\n                                found = true\r\n\r\n                                return false\r\n                            }\r\n\r\n                            else{\r\n                                this.setState({\r\n                                    renderPlayerRole: \"Ordinary Townsfolk\"\r\n                                })\r\n                                return true\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if(found){\r\n                        return false\r\n                    }\r\n\r\n                    else{\r\n                        return true\r\n                    }\r\n                })\r\n                \r\n            })\r\n\r\n            //Handle the first round\r\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle lover (every character must have)\r\n\r\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\r\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\r\n            \r\n            InGameSocket.on('RevealLovers', (data) => {\r\n                data.forEach((info, index) => {\r\n                    if(info.player === this.props.match.params.username){\r\n                        if(index === 0)\r\n                            this.setState({\r\n                                renderLovers: <p>You are now in love with {data[index+1].player} - {data[index+1].role}</p>\r\n                            })\r\n                        \r\n                        else{\r\n                            this.setState({\r\n                                renderLovers: <p>You are now in love with {data[index-1].player} - {data[index-1].role}</p>\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle changes of the total charmed players via a socket event (every character must have)\r\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\r\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\r\n            \r\n            InGameSocket.emit('RequestToRetrieveCharmPlayers', this.props.match.params.roomid)\r\n\r\n            InGameSocket.on('GetListOfCharmed', (data) => {\r\n                data.every((player) => {\r\n                    if(this.props.match.params.username === player){\r\n                        this.setState({\r\n                            renderCharmedPlayers: data.map((player, index) => {\r\n                                let key = 'charmed_' + index\r\n                                return(\r\n                                    <p key={key}>{player}</p>\r\n                                )\r\n                            })\r\n                        })\r\n\r\n                        return false\r\n                    }\r\n\r\n                    else\r\n                        return true\r\n                })\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            \r\n            //Handle the end of a round meaning the night (every character must have) \r\n            roundEndsSocket = socketIOClient(serverUrl + 'retrieve-round-ends')\r\n            roundEndsSocket.on('connect', () => {\r\n                roundEndsSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            roundEndsSocket.on('RoundEnds', data => {\r\n                if(data.dead instanceof Array)\r\n                    data.dead.forEach((death, i) => {\r\n                        if(this.props.match.params.username === death){\r\n                            this.setState({isDead: true})\r\n                        }\r\n                    })\r\n                \r\n                this.setState({\r\n                    roundEnds: true\r\n                })\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the end of a voting turn meaning the morning (every character must have)\r\n            votingRoundSocket = socketIOClient(serverUrl + 'in-game')\r\n\r\n            votingRoundSocket.on('connect', () => {\r\n                votingRoundSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            votingRoundSocket.on('StartNewRound', data => {\r\n                if(data === \"Start new round\"){\r\n                    this.setState({\r\n                        roundEnds: false\r\n                    })\r\n\r\n                    if(this.state.isAdmin){\r\n                        this.setState({\r\n                            renderStartBttn: <button className= \"in-game-start-night-button\" type=\"button\" onClick={this.startBttn}>Start the night</button>\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n\r\n            //Get hanged player\r\n            votedHangedPlayerSocket = socketIOClient(serverUrl + 'round-end')\r\n            votedHangedPlayerSocket.on('connect', () => {\r\n                votedHangedPlayerSocket.emit('JoinRoom', this.props.match.params.roomid)\r\n            })\r\n\r\n            votedHangedPlayerSocket.on('BroadcastREDeadPlayers', data => {\r\n                data.every((player) => {\r\n                    if(this.props.match.params.username === player){\r\n                        this.setState({isDead: true})\r\n                        return false\r\n                    }\r\n                    return true\r\n                })\r\n            })\r\n\r\n            /* <-----------------------------------------------> */\r\n\r\n            //Handle the end of the game (every character must have)\r\n            InGameSocket.on('GameEnds', data => {\r\n                if(data === \"Human won\"){\r\n                    this.setState({sideWon: 'Human'})\r\n                }\r\n                else if(data === \"Werewolves won\"){\r\n                    this.setState({sideWon: 'Werewolves'})\r\n                }\r\n                else if(data === \"Piper won\"){\r\n                    this.setState({sideWon: 'Piper'})\r\n                }\r\n                else if(data === \"Lovers won\")\r\n                    this.setState({sideWon: 'Piper'})\r\n\r\n                this.setState({\r\n                    gameEnds: true\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n\r\n        votingRoundSocket.disconnect()\r\n        votedHangedPlayerSocket.disconnect()\r\n        InGameSocket.disconnect()\r\n        adminSocket.disconnect()\r\n        firstRoundSocket.disconnect()\r\n        roundEndsSocket.disconnect()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n    }\r\n\r\n    ChooseLeftTab = (e) => {\r\n        //Display which left tab is highlighted\r\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"left-icon\").classList.add(\"tab-active\")\r\n\r\n\r\n        //transition to the left tab\r\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\r\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\r\n\r\n        document.getElementById(\"left-tab\").classList.add(\"in-game-user-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.add(\"in-game-role-tab-container-invisible-move-right\")\r\n    }\r\n\r\n    ChooseMiddleTab = () => {\r\n        //Display which middle tab is highlighted\r\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"middle-icon\").classList.add(\"tab-active\")\r\n\r\n\r\n        //transition to the middle tab\r\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\r\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\r\n\r\n    }\r\n\r\n    ChooseRightTab = () => {\r\n        //Display which right tab is highlighted\r\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"right-icon\").classList.add(\"tab-active\")\r\n\r\n        //transition to the right tab\r\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\r\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\r\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\r\n\r\n        document.getElementById(\"right-tab\").classList.add(\"in-game-extra-info-tab-container-visible\")\r\n        document.getElementById(\"middle-tab\").classList.add(\"in-game-role-tab-container-invisible-move-left\")\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            {/* Header for in game room */}\r\n            <div className=\"in-game-header-container\">\r\n                <button className=\"in-game-header-item-holder\" onClick={this.ChooseLeftTab} id=\"left-icon\">\r\n                    <i className=\"fas fa-user fa-lg\"></i>\r\n                </button>\r\n\r\n                <button className=\"in-game-header-item-holder tab-active\" onClick={this.ChooseMiddleTab} id=\"middle-icon\">\r\n                    <i className=\"fas fa-boxes fa-lg\"></i>\r\n\r\n                </button>\r\n                <button className=\"in-game-header-item-holder\" onClick={this.ChooseRightTab} id=\"right-icon\">\r\n                    <i className=\"fas fa-clipboard-list fa-lg\"></i>\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"in-game-main-container\">\r\n                <div className=\"in-game-title\">\r\n                    <h2>In Game Room</h2>\r\n                </div>\r\n\r\n                {/* Main tab / middle tab*/}\r\n                <div className=\"in-game-role-tab-container\" id=\"middle-tab\">\r\n                    <div className=\"in-game-role-tab-title\">\r\n                        <h4>{this.state.renderPlayerRole}</h4>\r\n                    </div>\r\n\r\n                    {this.state.gameEnds ? \r\n                        <div className=\"in-game-role-tab-main\">\r\n                            <p>{this.state.sideWon} Won!</p>\r\n                            <button onClick={this.CloseTheGame}>Close</button>\r\n                        </div>\r\n                        :\r\n                        <>\r\n                        {!this.state.roundEnds ?\r\n                            <>\r\n                            {this.state.isDead ?\r\n                                <div className=\"in-game-role-tab-main\">\r\n                                    <p>You are dead</p>\r\n                                </div>\r\n                                :\r\n                                <div className=\"in-game-role-tab-main\">\r\n                                    {this.state.renderRoleUI}\r\n                                </div >\r\n                            }\r\n                            </>\r\n                        :\r\n                            <>\r\n                            {this.state.isDead ?\r\n                                <div className=\"in-game-role-tab-main\">\r\n                                    <p>You are dead</p>\r\n                                </div>\r\n    \r\n                                :\r\n    \r\n                                <div className=\"in-game-role-tab-main\">\r\n                                    <RoundEnd roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\r\n                                </div>\r\n                            }\r\n                            </>\r\n                        }\r\n                        </>\r\n                    }\r\n                    \r\n                    {this.state.renderStartBttn}\r\n                    \r\n                </div>\r\n\r\n                {/* User tab / left tab*/}\r\n                <div className = \"in-game-user-tab-container\" id=\"left-tab\">\r\n                    <div className= \"in-game-room-info-container\">\r\n                        <p>Room ID: {this.props.match.params.roomid} </p>\r\n                        <p>Admin: {this.state.admin}</p>\r\n                        <p>Name: {this.props.match.params.username}</p>\r\n                    </div>\r\n\r\n                    {/* History log container */}\r\n                    <div className= \"in-game-room-history-container\">\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"in-game-role-tab-start-end-button-container\">\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* Extra info tab / right tab */}\r\n                <div className = \"in-game-extra-info-tab-container\" id=\"right-tab\">\r\n                    <div className= \"in-game-lover-info\">\r\n                        {this.state.renderLovers}\r\n                    </div>\r\n\r\n                    <div className= \"in-game-charm-info\">\r\n                        <h4>List of Charmed Players</h4>\r\n                        {this.state.renderCharmedPlayers}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default InGameRoom","import React, { Component } from 'react'\r\nimport './Welcome.css'\r\n\r\nclass Welcome extends Component{\r\n\r\n    state={}\r\n\r\n    playButton = () => {\r\n        this.props.history.push(`/login`)\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n    }    \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Welcome-page-cover\">\r\n                <div className=\"Welcome-page-title\">\r\n                    <h2>The Werewolves of Millers Hollow</h2>\r\n                    <p className=\"small-title-description\">DMC's ver. 1.0.0</p>\r\n                    <b className=\"small-title-description\">Source Code: </b>  <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"small-title-description\" href=\"https://github.com/minhchinh97h/werewolf_client\">Client</a>  <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"small-title-description\" href=\"https://github.com/minhchinh97h/werewolf_server\">Server</a>\r\n                </div>\r\n\r\n                <p target=\"_blank\" rel=\"noopener noreferrer\" href=\"#\" className=\"instruction-button\">\r\n                    How to play:    \r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://medium.com/@minhchinhduong97/how-to-play-werewolves-online-and-rules-3227524a0fcf\">EN</a>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/minhchinh97h/werewolves_online_how_to_VN/blob/master/README.md\">VN</a>\r\n                </p>\r\n\r\n                <div className=\"Welcome-page-button\">\r\n                    <button onClick={this.playButton}>\r\n                        Play\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"welcome-bottom-link\">\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Welcome","let currentRoles = {\r\n    'Werewolves': 0,\r\n    'Ordinary Townsfolk': 0,\r\n    'Seer/ Fortune Teller': 0,\r\n    // 'Hunter': 0,\r\n    'Cupid': 0,\r\n    'Witch': 0,\r\n    // 'Little Girl': 0,\r\n    // 'Sheriff': 0,\r\n    // 'Thief': 0,\r\n    // 'The village Idiot': 0,\r\n    // 'The ancient': 0,\r\n    // 'The scapegoat': 0,\r\n    'The savior': 0,\r\n    'The pied piper': 0,\r\n    // 'The villager villager': 0,\r\n    // 'The two sisters': 0,\r\n    // 'The three brothers': 0,\r\n    // 'The knight with the rusty sword': 0,\r\n    'The fox': 0,\r\n    'The bear leader': 0,\r\n    // 'The devoted servant': 0,\r\n    // 'The wild child': 0,\r\n    // 'The dog wolf': 0\r\n}\r\n\r\nexport default currentRoles","// const serverUrl = \"http://10.0.0.6:3001/\"\r\n// const serverUrl = \"https://werewolves-of-millers-hollow.herokuapp.com/\"\r\n\r\nconst serverUrl = \"http://159.89.111.33:3001/\"\r\n\r\nexport default serverUrl ","import React, { Component } from 'react'\r\n\r\nimport currentRoles from '../../validation/currentRoles/currentRoles'\r\n\r\nimport serverUrl from '../../serverUrl'\r\nimport \"./Login.css\"\r\n\r\nconst uniqid = require('uniqid')\r\nconst axios = require('axios')\r\n\r\nclass Login extends Component{\r\n\r\n    state={}\r\n\r\n    newRoomButton = () => {\r\n        let roomid = uniqid()\r\n\r\n        let input_player_username_node = document.getElementById(\"input_player_username\")\r\n\r\n        if(input_player_username_node.value.length === 0){\r\n            input_player_username_node.placeholder = \"Please enter a name\"\r\n        }\r\n\r\n        else{\r\n            //Create a player with the input name in players collection and also a room with updated players info\r\n            axios({\r\n                method: 'post',\r\n                url: serverUrl + 'rooms/' + roomid + '/create-player-and-room',\r\n                data: {\r\n                    roomid: roomid,\r\n                    username: input_player_username_node.value.trim(),\r\n                    currentRoles: currentRoles\r\n                }\r\n            })\r\n            .then(res => {\r\n                if(res.data === \"ok\"){\r\n                    this.props.history.push(`/waiting-room/` + roomid + `/` + input_player_username_node.value.trim())\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n\r\n    joinButton = () => {\r\n        let input_player_username_node = document.getElementById(\"input_player_username\"),\r\n            input_player_roomid_node = document.getElementById(\"input_player_roomid\")\r\n\r\n        if(input_player_username_node.value.length === 0){\r\n            input_player_username_node.placeholder = \"Please enter a name\"\r\n\r\n            if(input_player_roomid_node.value.length === 0){\r\n                input_player_roomid_node.placeholder = \"Please enter a valid room Id\"\r\n            }\r\n        }\r\n\r\n        else{\r\n            if(input_player_roomid_node.value.length === 0){\r\n                input_player_roomid_node.placeholder = \"Please enter a valid room Id\"\r\n            }\r\n\r\n            else{\r\n                //Check whether the room exists and whether the room contains the name\r\n                axios({\r\n                    method: 'post',\r\n                    url: serverUrl + 'rooms/' + input_player_roomid_node.value.trim() + '/get-room-check-username',\r\n                    data: {\r\n                        roomid: input_player_roomid_node.value.trim(),\r\n                        username: input_player_username_node.value.trim()\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    if(res.data === \"ok\"){\r\n                        this.props.history.push(`/waiting-room/` + input_player_roomid_node.value.trim() + `/`  + input_player_username_node.value.trim())\r\n                    }\r\n\r\n                    else if (res.data === \"username exists\"){\r\n                        input_player_username_node.placeholder = \"'\" + input_player_username_node.value.trim() + \"' already exists in \" + input_player_roomid_node.value.trim()\r\n                        input_player_username_node.value = \"\"\r\n                    }\r\n\r\n                    else {\r\n                        input_player_roomid_node.placeholder = \"'\" + input_player_roomid_node.value.trim() + \"' doesn't exist\"\r\n                        input_player_roomid_node.value = \"\"\r\n                    }\r\n                })\r\n                .catch(err => console.log(err))\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n    }\r\n\r\n    componentWillUnmount(){\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Login-page-cover\">\r\n                <div className=\"Login-page-title\">\r\n                    <h2>Login Room</h2>\r\n                </div>\r\n\r\n                <div className=\"Login-page-body\">\r\n\r\n                    <input type=\"text\" id=\"input_player_username\" name=\"player_username\" placeholder=\"Name\"/>\r\n\r\n                    <input type=\"text\" id=\"input_player_roomid\" name=\"player_roomid\" placeholder=\"Room ID\"/>\r\n\r\n                    <button className=\"button-of-Login\" type=\"button\" onClick={this.joinButton}>Join</button>\r\n\r\n                    <button className=\"button-of-Login create-new-room-button\" type=\"button\" onClick={this.newRoomButton}>Create a Room</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react';\r\nimport \"./Footer.css\"\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"footer-container\">\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react'\r\n\r\nimport socketIOClient from 'socket.io-client'\r\nimport currentRoles from '../../../../validation/currentRoles/currentRoles'\r\nimport serverUrl from '../../../../serverUrl'\r\n\r\nimport \"./DisplayCards.css\"\r\n\r\nclass DisplayCards extends Component {\r\n    _isMounted = false\r\n\r\n    state = {\r\n        renderCards: null,\r\n        renderPressedCards: null,\r\n        isCardSelected: false,\r\n        selectedCards: null,\r\n        pressedCards: null,\r\n        currentRoles: null\r\n    }\r\n\r\n    //Used to leave one card out of the current chosen card collection\r\n    decreaseCardBttn = (name, e) => {\r\n        currentRoles[name] -= 1\r\n        \r\n        if(currentRoles[name] < 0 || currentRoles[name] === 0){\r\n            currentRoles[name] = 0\r\n            document.getElementById(name + \"-quantity\").innerText = \"\"\r\n        }\r\n        let name_array = [],\r\n            value_array = []\r\n\r\n        for(var key in currentRoles){\r\n            if(currentRoles.hasOwnProperty(key))\r\n            {\r\n                if(currentRoles[key] > 0){\r\n                    name_array.push(key)\r\n                    value_array.push(currentRoles[key])\r\n                }\r\n                    \r\n            }\r\n        }\r\n        \r\n        name_array.forEach((name, index) => {\r\n            let quantityId = name + \"-quantity\"\r\n            \r\n            if(value_array[index] === 0)\r\n                document.getElementById(quantityId).innerText = \"\"\r\n            else\r\n                document.getElementById(quantityId).innerText = \"x\" + value_array[index]\r\n        })\r\n\r\n        this.setState({\r\n            isCardSelected: true\r\n        })\r\n    }\r\n\r\n    //Used to choose a card and add it to the chosen card collection\r\n    chooseCardBttn = (name, e) => {\r\n        currentRoles[name] += 1\r\n\r\n        if(name !== \"Ordinary Townsfolk\"){\r\n            if(currentRoles[name] > 1)\r\n                currentRoles[name] = 1\r\n        }\r\n        \r\n        let name_array = [],\r\n            value_array = []\r\n\r\n        for(var key in currentRoles){\r\n            if(currentRoles.hasOwnProperty(key))\r\n            {\r\n                if(currentRoles[key] > 0){\r\n                    name_array.push(key)\r\n                    value_array.push(currentRoles[key])\r\n                }\r\n                    \r\n            }\r\n        }\r\n        \r\n        name_array.forEach((name, index) => {\r\n            let quantityId = name + \"-quantity\"\r\n\r\n            document.getElementById(quantityId).innerText = \"x\" + value_array[index]\r\n        })\r\n\r\n        this.setState({\r\n            isCardSelected: true\r\n        })\r\n    }\r\n\r\n    //Used to submit the card collection to database\r\n    submitCardsBttn = (e) => {\r\n        let sentData = {\r\n            roomid: this.props.roomid,\r\n            currentRoles: currentRoles\r\n        }\r\n\r\n        const socket = socketIOClient(serverUrl + 'submit-selected-cards')\r\n\r\n        socket.on('connect', () => {\r\n            socket.emit('JoinRoom', sentData)\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this._isMounted = true\r\n\r\n        if(this._isMounted){\r\n\r\n            const cardSocket = socketIOClient(serverUrl + 'get-cards')\r\n\r\n            cardSocket.on('GetCards', data => {\r\n                this.setState({\r\n                    renderCards: data.map( (card, index) => {\r\n                        let cardId = \"card \" + index,\r\n                            quantityId = card.name + \"-quantity\"\r\n                        return(\r\n                            <div key = {card.name} className=\"card-item\">\r\n                                <button className =\"card-button\" type='button' onClick={this.chooseCardBttn.bind(this, card.name)} id={cardId}>{card.name}</button>\r\n                                <div className=\"card-quantity-holder\">\r\n                                    <p id={quantityId}></p>\r\n                                </div> \r\n                                <i className=\"fas fa-minus-square minus-sign fa-sm\" onClick={this.decreaseCardBttn.bind(this, card.name)}></i>\r\n                            </div>\r\n                        )\r\n                    })\r\n                })\r\n\r\n                //To make sure DOM elements (card-item) show up when below socket's data arrives.\r\n                const socket = socketIOClient(serverUrl + 'get-current-roles')\r\n\r\n                socket.on('connect', () => {\r\n                    socket.emit('JoinRoom', this.props.roomid)\r\n                })\r\n\r\n                socket.on('GetSelectedCards', data => {\r\n                    \r\n                    if(data !== null && this._isMounted){\r\n                        for(var key in data){\r\n                            if(data.hasOwnProperty(key)){\r\n                                currentRoles[key] = data[key]\r\n                            }\r\n                        }\r\n\r\n                        let name_array = [],\r\n                        value_array = []\r\n\r\n                        for(var k in currentRoles){\r\n                            if(currentRoles.hasOwnProperty(k))\r\n                            {\r\n                                if(currentRoles[k] > 0){\r\n                                    name_array.push(k)\r\n                                    value_array.push(currentRoles[k])\r\n                                }\r\n                                    \r\n                            }\r\n                        }\r\n                        \r\n                        name_array.forEach((name, index) => {\r\n                            let quantityId = name + \"-quantity\"\r\n                \r\n                            document.getElementById(quantityId).innerText = \"x\" + value_array[index]\r\n                        })\r\n\r\n                    }\r\n                \r\n                })\r\n            })\r\n\r\n                \r\n        }\r\n    }\r\n    \r\n    componentWillUnmount(){\r\n        this._isMounted = false\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n            <div className=\"admin-choose-cards-and-submit-button-container\" id=\"display-cards-container\">\r\n                <div className = \"display-cards-container\">\r\n                    {this.state.renderCards}\r\n                    \r\n                    \r\n                </div>\r\n                <div className=\"submit-card-collection-button-holder\">\r\n                        {this.state.isCardSelected ?\r\n\r\n                                <button type=\"button\" onClick={this.submitCardsBttn.bind(this)}>submit</button>\r\n                                :\r\n                                null\r\n                        }\r\n                </div>\r\n            </div>\r\n            \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default DisplayCards","import React, { Component } from 'react';\r\nimport \"./Header.css\"\r\n\r\n\r\nclass Header extends Component{\r\n\r\n    ChooseUserTab = (e) => {\r\n        //Display which user tab is highlighted\r\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"user-tab-button\").classList.add(\"tab-active\")\r\n\r\n\r\n        //transition to user tab, card collection tab of Admin page is automatically shown at first (firstly visible, others are invisible)\r\n        document.getElementById(\"room-information-container\").classList.remove(\"room-information-container-visible\")\r\n        document.getElementById(\"display-cards-container\").classList.remove(\"display-cards-container-invisible\")\r\n\r\n        document.getElementById(\"room-information-container\").classList.add(\"room-information-container-visible\")\r\n        document.getElementById(\"display-cards-container\").classList.add(\"display-cards-container-invisible\")\r\n    }\r\n\r\n    ChooseCardCollectionTab = () => {\r\n        //Display which card collection tab is highlighted\r\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"card-collection-button\").classList.add(\"tab-active\")\r\n\r\n\r\n        //transition to card collection tab\r\n        document.getElementById(\"room-information-container\").classList.remove(\"room-information-container-visible\")\r\n        document.getElementById(\"display-cards-container\").classList.remove(\"display-cards-container-invisible\")\r\n    }\r\n\r\n    ChooseFinalTab = () => {\r\n        //Display which final tab is highlighted\r\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\r\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\r\n\r\n        document.getElementById(\"final-tab-button\").classList.add(\"tab-active\")\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"header-container header-container-admin\" id=\"header\">\r\n                <button className=\"header-item-holder\" onClick={this.ChooseUserTab} id=\"user-tab-button\">\r\n                    <i className=\"fas fa-user fa-lg\"></i>\r\n                </button>\r\n                <button className=\"header-item-holder tab-active\" onClick={this.ChooseCardCollectionTab} id=\"card-collection-button\">\r\n                    <i className=\"fas fa-boxes fa-lg\"></i>\r\n\r\n                </button>\r\n                <button className=\"header-item-holder\" onClick={this.ChooseFinalTab} id=\"final-tab-button\">\r\n                    <i className=\"fas fa-clipboard-list fa-lg\"></i>\r\n                </button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Route } from 'react-router-dom'\r\nimport Welcome from './components/Welcome/Welcome'\r\nimport Login from './components/Login/Login'\r\nimport Footer from './components/Footer/Footer'\r\nimport {WaitingRoom} from './components/MainPage/WaitingRoom/WaitingRoom'\r\nimport InGameRoom from './components/MainPage/InGameRoom/InGameRoom'\r\n\r\nclass App extends Component {\r\n  \r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Route exact path=\"/\" component={Welcome}/>\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route exact path=\"/waiting-room/:roomid/:username\" component = {WaitingRoom} />\r\n        <Route exact path=\"/in-game-room/:roomid/:username\" component = {InGameRoom} />\r\n\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nimport { CookiesProvider } from 'react-cookie'\r\n\r\nReactDOM.render(\r\n<BrowserRouter>\r\n    <CookiesProvider>\r\n        <App />\r\n    </CookiesProvider>\r\n</BrowserRouter>\r\n,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}